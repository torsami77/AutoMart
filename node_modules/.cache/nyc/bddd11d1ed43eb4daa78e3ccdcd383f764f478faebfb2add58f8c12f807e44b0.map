{"version":3,"sources":["user_buyer_test.js"],"names":["chai","use","chaiHttp","should","expect","api","request","data","fs","readFileSync","__dirname","token","toString","carId","describe","it","done","post","send","assumedData","newOrder","end","err","res","body","be","a","have","property","equal","set","invalidOrderReff","invalidOrderAmount","orderNotFound","console","log"],"mappings":"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","sourceRoot":"/home/sami/Documents/AutoMart/test","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport fs from 'fs';\nimport util from 'util';\n// eslint-disable-next-line no-unused-vars\nimport app from '../src/app';\nimport assumedData from './assumed/assume';\n\nchai.use(chaiHttp);\n\nchai.should();\nconst { expect } = chai;\n\nconst api = chai.request('http://localhost:5000');\n\nconst data = fs.readFileSync(`${__dirname}/assumed/token.txt`);\nconst token = data.toString();\n// eslint-disable-next-line import/no-mutable-exports\nlet carId;\n\n\ndescribe('User Buyer Activities', () => {\n  it('should NOT let unauthenticated user (buyer) to make a purchase order', (done) => {\n    api\n      .post('/api/v1/order/')\n      .send(assumedData.newOrder)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(403);\n        res.body.should.have.property('success').equal('false');\n        res.body.should.have.property('error').equal('Unauthorised User!');\n        done();\n      });\n  });\n\n  it('should NOT let auth user (buyer) to attempt a purchase order with invalid order id', (done) => {\n    api\n      .post('/api/v1/order/')\n      .set('authorization', token)\n      .send(assumedData.invalidOrderReff)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(401);\n        res.body.should.have.property('success').equal('false');\n        res.body.should.have.property('error').equal('Please provide a valid order reference!');\n        done();\n      });\n  });\n\n  it('should NOT let auth user (buyer) to attempt a purchase order with invalid price value', (done) => {\n    api\n      .post('/api/v1/order/')\n      .set('authorization', token)\n      .send(assumedData.invalidOrderAmount)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(401);\n        res.body.should.have.property('success').equal('false');\n        res.body.should.have.property('error').equal('Please provide a valid price value!');\n        done();\n      });\n  });\n\n  it('should NOT let auth user (buyer) to attempt a purchase order with NOT Found refference', (done) => {\n    api\n      .post('/api/v1/order/')\n      .set('authorization', token)\n      .send(assumedData.orderNotFound)\n      .end((err, res) => {\n        console.log(res.body);\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(404);\n        res.body.should.have.property('success').equal('false');\n        res.body.should.have.property('error').equal('Ad not found, Please provide actual car Id!');\n        done();\n      });\n  });\n/*\n  it('should let authenticated user (buyer) to make a purchase order', (done) => {\n    api\n      .post('/api/v1/order/')\n      .send(assumedData.newOrder)\n      .set('authorization', token)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(201);\n        res.body.data.should.have.property('message').equal('Your Order has been placed successfully!');\n        res.body.data.should.have.property('success').equal('true');\n        expect(res)\n          .to.have.nested.property('body.data')\n          .that.includes.all.keys(['id', 'car_id', 'created_on',\n          'status', 'price', 'price_offered']);\n        res.body.data.id.should.be.a('number');\n        res.body.data.car_id.should.be.a('number');\n        res.body.data.created_on.should.be.a('string');\n        res.body.data.status.should.be.a('string');\n        res.body.data.price.should.be.a('number');\n        res.body.data.price_offered.should.be.a('number');\n        orderId = res.body.data.id;\n        done();\n      });\n  });\n\n  it('should NOT let unauthenticated user (buyer) to UPDATE purchase order', (done) => {\n      api\n        .patch(`/api/v1/order/${orderId}/price`)\n        .send(assumedData.newOrderUpdate)\n        .end((err, res) => {\n          res.body.should.be.a('object');\n          res.body.should.have.property('status').equal(403);\n          res.body.should.have.property('success').equal('false');\n          res.body.should.have.property('error').equal('Unauthorised User!');\n          done();\n        });\n    });\n\n    it('should NOT let auth user (buyer) to attempt a purchase UPDATE with invalid order id', (done) => {\n        api\n          .patch(`/api/v1/order/kkkk/price`)\n          .send(assumedData.invalidOrderReffUpdate)\n          .end((err, res) => {\n            res.body.should.be.a('object');\n            res.body.should.have.property('status').equal(401);\n            res.body.should.have.property('success').equal('false');\n            res.body.should.have.property('error').equal('Please provide a valid order reference!');\n            done();\n          });\n    });\n\n    it('should NOT let auth user (buyer) to attempt a purchase UPDATE with invalid price value', (done) => {\n        api\n          .patch(`/api/v1/order/${orderId}/price`)\n          .send(assumedData.invalidOrderAmountUpdate)\n          .end((err, res) => {\n            res.body.should.be.a('object');\n            res.body.should.have.property('status').equal(401);\n            res.body.should.have.property('success').equal('false');\n            res.body.should.have.property('error').equal('Please provide a valid AD reference!');\n            done();\n          });\n    });\n\n    it('should NOT let auth user (buyer) to attempt a purchase UPDATE with invalid price value', (done) => {\n      api\n        .patch(`/api/v1/order/${orderId}/price`)\n        .send(assumedData.invalidOrderAmountUpdate)\n        .end((err, res) => {\n          res.body.should.be.a('object');\n          res.body.should.have.property('status').equal(401);\n          res.body.should.have.property('success').equal('false');\n          res.body.should.have.property('error').equal('This Order cannot be updated anymore!');\n          done();\n        });\n  });\n\n    it('should NOT let auth user (buyer) to attempt a purchase UPDATE with NOT Found refference', (done) => {\n        api\n          .patch(`/api/v1/order/${orderId}/price`)\n          .send(assumedData.orderNotFoundUpdate)\n          .end((err, res) => {\n            res.body.should.be.a('object');\n            res.body.should.have.property('status').equal(404);\n            res.body.should.have.property('success').equal('false');\n            res.body.should.have.property('error').equal('Ad not found, Please provide actual car Id!');\n            done();\n          });\n    });\n\n\n  it('should let authenticated user (buyer) to UPDATE the price of a purchase order', (done) => {\n    api\n      .patch(`/api/v1/order/${orderId}/price`)\n      .send(assumedData.newOrderUpdate)\n      .set('authorization', token)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.data.should.have.property('message').equal('Purchase order updated successfully!');\n        expect(res)\n          .to.have.nested.property('body.data')\n          .that.includes.all.keys(['id', 'car_id', 'status', 'old_price_offered',\n          'new_price_offered']);\n        res.body.data.id.should.be.a('number');\n        res.body.data.car_id.should.be.a('number');\n        res.body.data.status.should.be.a('string');\n        res.body.data.old_price_offered.should.be.a('number');\n        res.body.data.new_price_offered.should.be.a('number');\n        done();\n      });\n  });\n\n  it('should NOT let auth user (buyer) to attempt FLAG with INVALID refference', (done) => {\n      api\n        .post(`/api/v1/flag`)\n        .send(assumedData.orderNotFoundUpdate)\n        .end((err, res) => {\n          res.body.should.be.a('object');\n          res.body.should.have.property('status').equal(401);\n          res.body.should.have.property('success').equal('false');\n          res.body.should.have.property('error').equal('Ad not found!');\n          done();\n        });\n  });\n\n  it('should NOT let auth user (buyer) to attempt FLAG withOUT REASON', (done) => {\n      api\n        .post(`/api/v1/flag`)\n        .send(assumedData.orderNotFoundUpdate)\n        .end((err, res) => {\n          res.body.should.be.a('object');\n          res.body.should.have.property('status').equal(401);\n          res.body.should.have.property('success').equal('false');\n          res.body.should.have.property('error').equal('Please indicate your reason for this red flag!');\n          done();\n        });\n  });\n\n  it('should NOT let auth user (buyer) to attempt FLAG withOUT DESCRIPTION', (done) => {\n      api\n        .post(`/api/v1/flag`)\n        .send(assumedData.orderNotFoundUpdate)\n        .end((err, res) => {\n          res.body.should.be.a('object');\n          res.body.should.have.property('status').equal(401);\n          res.body.should.have.property('success').equal('false');\n          res.body.should.have.property('error').equal('Please enter description for your red flag!');\n          done();\n        });\n  });\n\n  it('should NOT let auth user (buyer) to attempt FLAG with NOT Found refference', (done) => {\n      api\n        .post(`/api/v1/flag`)\n        .send(assumedData.orderNotFoundUpdate)\n        .end((err, res) => {\n          res.body.should.be.a('object');\n          res.body.should.have.property('status').equal(404);\n          res.body.should.have.property('success').equal('false');\n          res.body.should.have.property('error').equal('Ad not found!');\n          done();\n        });\n  });\n\n  it('should let auth user (buyer) to FLAG an AD successfully', (done) => {\n      api\n        .post(`/api/v1/flag`)\n        .send(assumedData.orderNotFoundUpdate)\n        .end((err, res) => {\n          res.body.should.be.a('object');\n          res.body.should.have.property('status').equal(201);\n          res.body.should.have.property('success').equal('true');\n          res.body.should.have.property('error').equal('Red flag raised successfully!');\n          done();\n        });\n  });\n  */\n});\n "]}