"use strict";var cov_2jhi50u0dv=function(){var path="/home/sami/Documents/AutoMart/test/user_seller_test.js";var hash="397528013171a4da6fc5f2a67e4266b559d55c20";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/sami/Documents/AutoMart/test/user_seller_test.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:6,column:0},end:{line:6,column:28}},"2":{start:{line:8,column:12},end:{line:8,column:51}},"3":{start:{line:10,column:16},end:{line:10,column:60}},"4":{start:{line:12,column:10},end:{line:12,column:47}},"5":{start:{line:14,column:12},end:{line:14,column:51}},"6":{start:{line:16,column:11},end:{line:16,column:56}},"7":{start:{line:18,column:14},end:{line:18,column:65}},"8":{start:{line:20,column:39},end:{line:20,column:95}},"9":{start:{line:23,column:0},end:{line:23,column:43}},"10":{start:{line:25,column:0},end:{line:25,column:26}},"11":{start:{line:27,column:13},end:{line:27,column:36}},"12":{start:{line:29,column:10},end:{line:29,column:59}},"13":{start:{line:31,column:11},end:{line:31,column:82}},"14":{start:{line:33,column:12},end:{line:33,column:27}},"15":{start:{line:36,column:0},end:{line:364,column:3}},"16":{start:{line:37,column:2},end:{line:44,column:5}},"17":{start:{line:38,column:4},end:{line:43,column:7}},"18":{start:{line:39,column:6},end:{line:39,column:37}},"19":{start:{line:40,column:6},end:{line:40,column:57}},"20":{start:{line:41,column:6},end:{line:41,column:73}},"21":{start:{line:42,column:6},end:{line:42,column:13}},"22":{start:{line:204,column:2},end:{line:212,column:5}},"23":{start:{line:205,column:4},end:{line:205,column:46}},"24":{start:{line:206,column:4},end:{line:211,column:7}},"25":{start:{line:207,column:6},end:{line:207,column:37}},"26":{start:{line:208,column:6},end:{line:208,column:57}},"27":{start:{line:209,column:6},end:{line:209,column:81}},"28":{start:{line:210,column:6},end:{line:210,column:13}},"29":{start:{line:365,column:15},end:{line:365,column:20}},"30":{start:{line:366,column:0},end:{line:366,column:30}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:20,column:9},end:{line:20,column:31}},loc:{start:{line:20,column:37},end:{line:20,column:97}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:36,column:35},end:{line:36,column:36}},loc:{start:{line:36,column:47},end:{line:364,column:1}},line:36},"2":{name:"(anonymous_2)",decl:{start:{line:37,column:74},end:{line:37,column:75}},loc:{start:{line:37,column:90},end:{line:44,column:3}},line:37},"3":{name:"(anonymous_3)",decl:{start:{line:38,column:68},end:{line:38,column:69}},loc:{start:{line:38,column:88},end:{line:43,column:5}},line:38},"4":{name:"(anonymous_4)",decl:{start:{line:204,column:85},end:{line:204,column:86}},loc:{start:{line:204,column:101},end:{line:212,column:3}},line:204},"5":{name:"(anonymous_5)",decl:{start:{line:206,column:222},end:{line:206,column:223}},loc:{start:{line:206,column:242},end:{line:211,column:5}},line:206}},branchMap:{"0":{loc:{start:{line:20,column:46},end:{line:20,column:94}},type:"cond-expr",locations:[{start:{line:20,column:70},end:{line:20,column:73}},{start:{line:20,column:76},end:{line:20,column:94}}],line:20},"1":{loc:{start:{line:20,column:46},end:{line:20,column:67}},type:"binary-expr",locations:[{start:{line:20,column:46},end:{line:20,column:49}},{start:{line:20,column:53},end:{line:20,column:67}}],line:20}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"397528013171a4da6fc5f2a67e4266b559d55c20"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_2jhi50u0dv.s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_2jhi50u0dv.s[1]++;exports["default"]=void 0;var _chai=(cov_2jhi50u0dv.s[2]++,_interopRequireDefault(require("chai")));var _chaiHttp=(cov_2jhi50u0dv.s[3]++,_interopRequireDefault(require("chai-http")));var _fs=(cov_2jhi50u0dv.s[4]++,_interopRequireDefault(require("fs")));var _util=(cov_2jhi50u0dv.s[5]++,_interopRequireDefault(require("util")));var _app=(cov_2jhi50u0dv.s[6]++,_interopRequireDefault(require("../src/app")));var _assume=(cov_2jhi50u0dv.s[7]++,_interopRequireDefault(require("./assumed/assume")));function _interopRequireDefault(obj){cov_2jhi50u0dv.f[0]++;cov_2jhi50u0dv.s[8]++;return(cov_2jhi50u0dv.b[1][0]++,obj)&&(cov_2jhi50u0dv.b[1][1]++,obj.__esModule)?(cov_2jhi50u0dv.b[0][0]++,obj):(cov_2jhi50u0dv.b[0][1]++,{"default":obj});}// eslint-disable-next-line no-unused-vars
cov_2jhi50u0dv.s[9]++;_chai["default"].use(_chaiHttp["default"]);cov_2jhi50u0dv.s[10]++;_chai["default"].should();var expect=(cov_2jhi50u0dv.s[11]++,_chai["default"].expect);var api=(cov_2jhi50u0dv.s[12]++,_chai["default"].request('http://localhost:5000'));var data=(cov_2jhi50u0dv.s[13]++,_fs["default"].readFileSync("".concat(__dirname,"/assumed/token.txt")));var token=(cov_2jhi50u0dv.s[14]++,data.toString());// eslint-disable-next-line import/no-mutable-exports
var carId;cov_2jhi50u0dv.s[15]++;describe('User Seller Activities',function(){cov_2jhi50u0dv.f[1]++;cov_2jhi50u0dv.s[16]++;it('should NOT let unauthenticated user (seller) create a new Advert ',function(done){cov_2jhi50u0dv.f[2]++;cov_2jhi50u0dv.s[17]++;api.post('/api/v1/car/').send(_assume["default"].newAdvert).end(function(err,res){cov_2jhi50u0dv.f[3]++;cov_2jhi50u0dv.s[18]++;res.body.should.be.a('object');cov_2jhi50u0dv.s[19]++;res.body.should.have.property('status').equal(403);cov_2jhi50u0dv.s[20]++;res.body.should.have.property('error').equal('Unauthorised User!');cov_2jhi50u0dv.s[21]++;done();});});/*
    it('should NOT let invalid Token user to post new Advert/affect posted Advert', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', 'represents invalid toke')
        .send(assumedData.newAdvert)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(403);
          res.body.should.have.property('error').equal('Unauthorised User!');
          done();
        });
    });
  
    it('should NOT let Authenticated User (Seller) to post new Advert without MANUFACTURER input', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', token)
        .send(assumedData.noManufacturerAdvert)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(422);
          res.body.should.have.property('error').equal('manufacturer field cannot be empty!');
          done();
        });
    });
  /*
    it('should NOT let Auth User (Seller) to post new Advert without MODEL input', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', token)
        .send(assumedData.noModelAdvert)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(422);
          res.body.should.have.property('error').equal('model field cannot be empty!');
          done();
        });
    });
  
    it('should NOT let Auth User (Seller) to post new Advert without BODY TYPE input', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', token)
        .send(assumedData.noBodyTypeAdvert)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(422);
          res.body.should.have.property('error').equal('bodyType field cannot be empty!');
          done();
        });
    });
  /*
    it('should NOT let Auth User (Seller) to post new Advert without YEAR input', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', token)
        .send(assumedData.noYearAdvert)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(401);
          res.body.should.have.property('error').equal('year field cannot be empty!');
          done();
        });
    });
  
    it('should NOT let Auth User (Seller) to post new Advert without STATE input', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', token)
        .send(assumedData.noStateAdvert)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(401);
          res.body.should.have.property('error').equal('state field cannot be empty!');
          done();
        });
    });
  
    it('should NOT let Auth User (Seller) to post new Advert without TRANSMISSION input', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', token)
        .send(assumedData.noTransmissionAdvert)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(422);
          res.body.should.have.property('error').equal('transmission field cannot be empty!');
          done();
        });
    });
  
    it('should NOT let Auth User (Seller) to post new Advert without Veh-Ins-Num input', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', token)
        .send(assumedData.noVINAdvert)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(422);
          res.body.should.have.property('error')
            .equal('vehicleInspectionNumber field cannot be empty!');
          done();
        });
    });
  
    it('should NOT let Auth User (Seller) to post new Advert without LICENCE input', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', token)
        .send(assumedData.noLicenceAdvert)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(422);
          res.body.should.have.property('error').equal('licence field cannot be empty!');
          done();
        });
    });
  
    it('should NOT let Auth User (Seller) to post new Advert without MILEAGE input', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', token)
        .send(assumedData.noMileageAdvert)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(422);
          res.body.should.have.property('error').equal('mileage field cannot be empty!');
          done();
        });
    });
  
    it('should NOT let Auth User (Seller) to post new Advert without DESCRIPTION input', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', token)
        .send(assumedData.noDescriptionAdvert)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(422);
          res.body.should.have.property('error').equal('description field cannot be empty!');
          done();
        });
    });
  
    it('should NOT let Auth User (Seller) to post new Advert without PRICE input', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', token)
        .send(assumedData.noPriceAdvert)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(422);
          res.body.should.have.property('error').equal('price field cannot be empty!');
          done();
        });
    });
  */cov_2jhi50u0dv.s[22]++;it('should NOT let Auth User (Seller) to post new Advert without CAR IMAGE input',function(done){cov_2jhi50u0dv.f[4]++;cov_2jhi50u0dv.s[23]++;console.log(_assume["default"].newAdvert);cov_2jhi50u0dv.s[24]++;api.post('/api/v1/car').set('authorization',token).set('Accept','application.json').field('manufacturer',_assume["default"].newAdvert.manufacturer).attach('carImage',"".concat(__dirname,"/assumed/blank.pdf")).end(function(err,res){cov_2jhi50u0dv.f[5]++;cov_2jhi50u0dv.s[25]++;res.body.should.be.a('object');cov_2jhi50u0dv.s[26]++;res.body.should.have.property('status').equal(422);cov_2jhi50u0dv.s[27]++;res.body.should.have.property('error').equal('Upload at least one image!');cov_2jhi50u0dv.s[28]++;done();});});/*
    it('should NOT let Auth User (Seller) to post new Advert without a valid image file', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', token)
        .send(assumedData.newAdvert)
        .attach('carImage', './assumed/blank.pdf')
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(422);
          res.body.should.have.property('error').equal('Please provide a valid image file!');
          done();
        });
    });
  
    it('should let Auth user (seller) to create new Advert', (done) => {
      api
        .post('/api/v1/car')
        .set('authorization', token)
        .send(assumedData.newAdvert)
        .attach('carImage', './assumed/blank.pdf')
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(201);
          res.body.data.should.be.a('object');
          expect(res)
            .to.have.nested.property('body.data')
            .that.includes.all.keys(['id', 'email', 'created_on', 'manufacturer', 'model',
              'price', 'state', 'status', 'imageGallery']);
          res.body.data.id.should.be.a('number');
          res.body.data.email.should.be.a('string');
          res.body.data.created_on.should.be.a('string');
          res.body.data.manufacturer.should.be.a('string');
          res.body.data.model.should.be.a('string');
          res.body.data.price.should.be.a('number');
          res.body.data.state.should.be.a('string');
          res.body.data.status.should.be.a('string');
          res.body.data.imageGallery.should.be.a('array');
          res.body.data.should.have.property('message').equal('Your Ad has been added successfully!');
          carId = res.body.data.id;
          done();
        });
    });
  
  /*
    it('should NOT let Auth User (Seller) change price of sold or not owned AD', (done) => {
      api
        .patch(`/api/v1/car/${1}/price`)
        .set('authorization', token)
        .send(assumedData.newPrice)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(403);
          res.body.should.have.property('error').equal('You cannot change the price of this Ad!');
          done();
        });
    });
  
    it('should NOT let Auth User (Seller) change Ad price to invalid value ', (done) => {
      api
        .patch(`/api/v1/car/${carId}/price`)
        .set('authorization', token)
        .send(assumedData.invalidPrice)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(401);
          res.body.should.have.property('error').equal('Invalid Price value!');
          done();
        });
    });
  
    it('should NOT let Auth User (Seller) change Ad price with invalid reference', (done) => {
      api
        .patch('/api/v1/car/:carId/price')
        .set('authorization', token)
        .send(assumedData.newPrice)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(401);
          res.body.should.have.property('error').equal('Invalid Param Request!');
          done();
        });
    });
  
    it('Should let Auth User (seller) to update the price of his/her posted AD.', (done) => {
      api
        .patch(`/api/v1/car/${carId}/price`)
        .set('authorization', token)
        .send(assumedData.newPrice)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(201);
          res.body.data.should.have.property('message').equal('New price Updated!');
          res.body.data.should.have.property('price').equal(assumedData.newPrice.price);
          done();
        });
    });
  
     it('should NOT let Auth User (Seller) change Status to sold with invalid reference', (done) => {
      api
        .patch('/api/v1/car/:carId/status')
        .set('authorization', token)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(401);
          res.body.should.have.property('error').equal('Invalid Param Request!');
          done();
        });
    });
  
    it('should NOT let Auth User (Seller) change AD(not owned) status to sold', (done) => {
      api
        .patch(`/api/v1/car/${1}/price`)
        .set('authorization', token)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(403);
          res.body.should.have.property('error').equal('You are not allowed to mark this Ad as sold!');
          done();
        });
    });
  
  
    it('Should let Auth User (seller) to mark his/her posted Advert as sold', (done) => {
      api
        .patch(`/api/v1/car/${carId}/status`)
        .set('authorization', token)
        .end((err, res) => {
          res.body.should.be.a('object');
          expect(res)
            .to.have.nested.property('body.data')
            .that.includes.all.keys(['id', 'email', 'created_on', 'manufacturer', 'model',
              'price', 'state', 'status', 'message', 'success', 'field']);
          res.body.data.id.should.be.a('number');
          res.body.data.email.should.be.a('string');
          res.body.data.created_on.should.be.a('string');
          res.body.data.manufacturer.should.be.a('string');
          res.body.data.model.should.be.a('string');
          res.body.data.price.should.be.a('number');
          res.body.data.state.should.be.a('string');
          res.body.data.status.should.be.a('string');
          res.body.data.message.should.be.a('string');
          res.body.data.success.should.be.a('string');
          res.body.should.have.property('status').equal(201);
          res.body.data.should.have.property('message').equal('Car marked as sold!');
          done();
        });
    });
  
  
        */});var _default=(cov_2jhi50u0dv.s[29]++,carId);cov_2jhi50u0dv.s[30]++;exports["default"]=_default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,