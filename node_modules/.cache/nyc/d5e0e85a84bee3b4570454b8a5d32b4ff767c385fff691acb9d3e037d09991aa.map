{"version":3,"sources":["signUp.js"],"names":["app","use","bodyParser","json","urlencoded","extended","text","type","signUp","req","res","body","hasOwnProperty","email","status","send","error","success","field","username","firstName","lastName","address","checker","i","forEach","item","replace","toLowerCase","password","verify","mailformat","match","length","db","users","map","user","bcrypt","hash","newUser","id","first_name","last_name","is_admin","created_on","Date","push","data","message"],"mappings":"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","sourceRoot":"/home/sami/Documents/AutoMart/src/ctl","sourcesContent":["import bcrypt from 'bcryptjs';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport db from '../db/db';\n\nconst app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.text());\napp.use(bodyParser.json({ type: 'application/json' }));\n\n\nconst signUp = (req, res) => {\n  if (!req.body.hasOwnProperty(email)) {\n    return res.status(400).send({\n      status: 404,\n      error: 'Please Provide Complete Payload',\n      success: 'false',\n      field: 'username',\n    });\n  }\n  \n  let {\n    username, firstName, lastName, address,\n  } = req.body;\n  let checker = [username, firstName, lastName, address];\n\n  let i = 0;\n  checker.forEach((item) => {\n    if (item !== '') {\n      checker[i] = item.replace(/[^0-9A-Za-z,]/g, '').toLowerCase();\n      i += 1;\n    }\n  });\n\n  [username, firstName, lastName, address] = checker;\n\n\n  const {\n    email, password, verify,\n  } = req.body;\n  const mailformat = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n  if (username === '') {\n    return res.status(400).send({\n      status: 404,\n      error: 'Please Provide a Username',\n      success: 'false',\n      field: 'username',\n    });\n  }\n\n  if (!email.match(mailformat)) {\n    return res.status(400).send({\n      status: 404,\n      error: 'Please Enter a Valid Email',\n      success: 'false',\n      field: 'email',\n    });\n  }\n\n  if (firstName === '') {\n    return res.status(400).send({\n      status: 404,\n      error: 'Please Enter your First Name',\n      success: 'false',\n      field: 'first-name',\n    });\n  }\n\n\n  if (lastName === '') {\n    return res.status(400).send({\n      status: 404,\n      error: 'Please Enter your Last Name',\n      success: 'false',\n      field: 'last-name',\n    });\n  }\n\n  if (address === '') {\n    return res.status(400).send({\n      status: 404,\n      error: 'Please Enter your Address',\n      success: 'false',\n      field: 'username',\n    });\n  }\n\n  if (password === '') {\n    return res.status(400).send({\n      status: 404,\n      error: 'Please Provide a Password',\n      success: 'false',\n      field: 'password',\n    });\n  }\n\n  if (password.length < 8) {\n    return res.status(400).send({\n      status: 404,\n      error: 'Password is Too Short!',\n      success: 'false',\n      field: 'password',\n    });\n  }\n\n  if (verify !== password) {\n    return res.status(400).send({\n      status: 404,\n      error: 'Verifiable Password Does not Match!',\n      success: 'false',\n      field: 'password',\n    });\n  }\n\n  db.users.map((user) => {\n    if (user.email === email || user.username === username) {\n      if (user.email === email) {\n        return res.status(400).send({\n          status: 404,\n          error: 'Email is associated with another user!',\n          success: 'false',\n          field: 'email',\n        });\n      }\n      if (user.username === username) {\n        return res.status(400).send({\n          status: 404,\n          error: 'Username already taken by another user!',\n          success: 'false',\n          field: 'username',\n        });\n      }\n    }\n    bcrypt.hash(password, 10, (error, hash) => {\n      if (error) {\n        return res.status(400).send({\n          status: 404,\n          error,\n          field: 'password',\n        });\n      }\n\n      const newUser = {\n        id: db.users.length + 1,\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        password: hash,\n        address,\n        is_admin: false,\n        created_on: new Date(),\n      };\n      db.users.push(newUser);\n\n      return res.send({\n        status: 200,\n        data: {\n          id: newUser.id,\n          first_name: newUser.first_name,\n          last_name: newUser.last_name,\n          email: newUser.email,\n          success: 'true',\n          message: 'Your Signed up was successful',\n        },\n      });\n    });\n    return false;\n  });\n  return false;\n};\n\nexport default signUp;\n"]}