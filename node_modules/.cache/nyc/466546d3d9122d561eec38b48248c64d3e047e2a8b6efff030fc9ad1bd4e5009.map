{"version":3,"sources":["seller.js"],"names":["app","cloudinary","mynodeconfig","use","bodyParser","json","urlencoded","extended","text","type","Seller","req","res","body","manufacturer","model","bodyType","year","mileage","state","transmission","vehicleInspectionNumber","licence","description","price","checker","floatChecker","Object","keys","forEach","payload","undefined","status","send","error","success","field","Number","isNaN","parseFloat","match","file","originalname","uploader","upload","path","result","_error","secure_url","imageGallery","orders","flags","id","db","cars","length","createdOn","Date","newCar","owner","userData","created_on","push","data","email","message"],"mappings":"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","sourceRoot":"/home/sami/Documents/AutoMart/src/ctl","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport db from '../db/db';\nimport mynodeconfig from '../mynodeconfig';\n\nconst app = express();\nconst { cloudinary } = mynodeconfig;\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.text());\napp.use(bodyParser.json({ type: 'application/json' }));\n\n\nclass Seller {\n  static postAd(req, res) {\n    const {\n      // eslint-disable-next-line max-len\n      manufacturer, model, bodyType, year, mileage, state, transmission, vehicleInspectionNumber, licence, description, price,\n    } = req.body;\n\n    const checker = {\n      // eslint-disable-next-line max-len\n      manufacturer, model, bodyType, year, mileage, state, transmission, vehicleInspectionNumber, licence, description, price,\n    };\n    const floatChecker = { price, year, mileage };\n\n    Object.keys(checker).forEach((payload) => {\n      if (undefined === checker[payload]) {\n        return res.status(422).send({\n          status: 422,\n          error: `${payload} field cannot be empty!`,\n          success: 'false',\n          field: `${payload}`,\n        });\n      }\n      return false;\n    });\n\n\n    Object.keys(floatChecker).forEach((payload) => {\n      if (Number.isNaN(parseFloat(floatChecker[payload])) || (payload === 'year' && (!floatChecker[payload].match(/^\\d{4}$/)))) {\n        return res.status(422).send({\n          status: 422,\n          error: `Invalid ${payload} input`,\n          success: 'false',\n          field: `${payload}`,\n        });\n      }\n      return false;\n    });\n\n    if (!req.file) {\n      return res.status(422).send({\n        status: 422,\n        error: 'Upload at least one image!',\n        success: 'false',\n        field: 'carImage',\n      });\n    }\n\n    if (!req.file.originalname.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n      return res.status(422).send({\n        status: 422,\n        error: 'Please provide a valid image file!',\n        success: 'false',\n        field: 'carImage',\n      });\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    cloudinary.uploader.upload(req.file.path, (result, _error) => {\n      if (result.secure_url) {\n        const imageGallery = [result.secure_url];\n        const orders = [];\n        const flags = [];\n        const id = db.cars.length + 1;\n        const createdOn = new Date();\n        const status = 'Available';\n\n        const newCar = {\n          id,\n          owner: req.userData.id,\n          created_on: createdOn,\n          // eslint-disable-next-line object-property-newline\n          state, status, price, manufacturer, model, bodyType, year, mileage,\n          // eslint-disable-next-line object-property-newline\n          transmission, vehicleInspectionNumber, licence, description, imageGallery, orders, flags,\n        };\n        db.cars.push(newCar);\n        return res.status(201).send({\n          status: 201,\n          data: {\n            id,\n            email: req.userData.email,\n            created_on: createdOn,\n            manufacturer,\n            model,\n            price,\n            state,\n            status,\n            imageGallery,\n            message: 'Your Ad has been added successfully!',\n            success: 'true',\n          },\n        });\n      }\n      return res.status(500).send({\n        status: 500,\n        error: 'No response from Cloudinary!, Please try again ',\n        success: 'false',\n        field: 'Cloudinary',\n      });\n    });\n    return false;\n  }\n}\n\n\nexport default Seller;\n"]}