{"version":3,"sources":["signIn.js"],"names":["app","use","bodyParser","json","urlencoded","extended","text","type","signIn","req","res","body","email","password","mailformat","undefined","match","status","send","error","success","field","searchedUser","db","users","find","user","bcrypt","compare","then","ismatched","hash","token","jwt","sign","process","env","SECRET_KEY","expiresIn","cookie","username","data","message"],"mappings":"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","sourceRoot":"/home/sami/Documents/AutoMart/src/ctl","sourcesContent":["import express from 'express';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport bodyParser from 'body-parser';\nimport db from '../db/db';\n\nconst app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.text());\napp.use(bodyParser.json({ type: 'application/json' }));\n\n\nconst signIn = (req, res) => {\n  const { email, password } = req.body;\n  const mailformat = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n  if (undefined === email || !email.match(mailformat)) {\n    return res.status(401).send({\n      status: 401,\n      error: 'Please Enter a Valid Email!',\n      success: 'false',\n      field: 'email',\n    });\n  }\n\n\n  if (undefined === password) {\n    return res.status(401).json({\n      status: 401,\n      error: 'Please enter your password!',\n      success: 'false',\n      field: 'password',\n    });\n  }\n  const searchedUser = db.users.find(user => user.email === email);\n  if (undefined === searchedUser) {\n    return res.status(401).json({\n      status: 401,\n      error: 'Invalid Signin Credentials!',\n      success: 'false',\n    });\n  }\n  bcrypt.compare(password, searchedUser.password).then((ismatched) => {\n    if (!ismatched) {\n      return res.status(401).json({\n        status: 401,\n        error: 'Invalid Signin Credentials!',\n        success: 'false',\n      });\n    }\n    if (ismatched) {\n      bcrypt.hash(password, 10, (error, hash) => {\n        const token = jwt.sign({\n          email,\n          hash,\n        }, process.env.SECRET_KEY, { expiresIn: '1h' });\n        res.cookie('username', searchedUser.username);\n        res.cookie('token', token);\n        return res.status(200).json({\n          status: 200,\n          data: {\n            success: 'true',\n            message: 'Auth successful!',\n            token,\n          },\n        });\n      });\n    }\n    return false;\n  });\n  return false;\n};\n\nexport default signIn;\n"]}