{"version":3,"sources":["user_authentication_test.js"],"names":["chai","use","chaiHttp","should","expect","api","request","token","userId","describe","it","done","post","send","assumedData","noEmailUsers","end","err","res","body","be","a","have","property","equal","noUsernameUsers","noFirstNameUsers","noLastNameUsers","noPasswordUsers","status","lessPass","passMismatchUsers","newUsers","data","to","nested","that","includes","all","keys","id","first_name","last_name","email","equals"],"mappings":"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","sourceRoot":"/home/sami/Documents/AutoMart/test","sourcesContent":["\nimport chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport app from '../src/app';\nimport assumedData from './assumed/assume';\n\nchai.use(chaiHttp);\n\nchai.should();\nconst { expect } = chai;\n\nconst api = chai.request('http://localhost:5000');\n\nlet token;\nlet userId;\n\n/*\ndescribe('Auto Mart', () => {\n  it('should get 404 page', (done) => {\n    chai.request(app)\n      .get('/invalidendpoint')\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.should.have.status(404);\n        res.body.should.have.property('status').eql(404);\n        res.body.should.have.property('data').equal('Invalid endpoint');\n        done();\n      });\n  });\n});\n*/\ndescribe('Users Sign Up Tests', () => {\n  it('should NOT let user sign up without email', (done) => {\n    api\n      .post('/api/v1/signup')\n      .send(assumedData.noEmailUsers)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(401);\n        res.body.should.have.property('error').equal('Please Enter a Valid Email');\n        done();\n      });\n  });\n\n  it('should NOT let user sign up without username', (done) => {\n    api\n      .post('/api/v1/signup')\n      .send(assumedData.noUsernameUsers)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(401);\n        res.body.should.have.property('error').equal('Please Provide a Username');\n        done();\n      });\n  });\n\n  it('should NOT let user sign up without firstname', (done) => {\n    api\n      .post('/api/v1/signup')\n      .send(assumedData.noFirstNameUsers)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(401);\n        res.body.should.have.property('error').equal('Please Enter your First Name');\n        done();\n      });\n  });\n\n  it('should NOT let user sign up without lastname', (done) => {\n    api\n      .post('/api/v1/signup')\n      .send(assumedData.noLastNameUsers)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(401);\n        res.body.should.have.property('error').equal('Please Enter your Last Name');\n        done();\n      });\n  });\n\n  it('should NOT let user sign up without password', (done) => {\n    api\n      .post('/api/v1/signup')\n      .send(assumedData.noPasswordUsers)\n      .end((err, res) => {\n        res.should.have.status(400);\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(401);\n        res.body.should.have.property('error').equal('Please Provide a Password');\n        done();\n      });\n  });\n\n  it('should NOT let user sign up with a less than 8 character password', (done) => {\n    api\n      .post('/api/v1/signup')\n      .send(assumedData.lessPass)\n      .end((err, res) => {\n        res.should.have.status(400);\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(401);\n        res.body.should.have.property('error').equal('Password is Too Short!');\n        done();\n      });\n  });\n\n  it('should not let user sign up with mismatch password', (done) => {\n    api\n      .post('/api/v1/signup')\n      .send(assumedData.passMismatchUsers)\n      .end((err, res) => {\n        res.should.have.status(400);\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(401);\n        res.body.should.have.property('error').equal('Verifiable Password Does not Match!');\n        done();\n      });\n  });\n\n  it('should let users sign up successfully', (done) => {\n    api\n      .post('/api/v1/signup')\n      .send(assumedData.newUsers)\n      .end((err, res) => {\n        res.should.have.status(201);\n        res.body.should.be.a('object');\n        res.body.data.should.be.a('object');\n        expect(res)\n          .to.have.nested.property('body.data')\n          .that.includes.all.keys(['id', 'token', 'first_name', 'last_name', 'email']);\n        res.body.data.id.should.be.a('number');\n        res.body.data.token.should.be.a('string');\n        res.body.data.first_name.should.be.a('string');\n        res.body.data.last_name.should.be.a('string');\n        res.body.data.email.should.be.a('string');\n        res.body.data.should.have.property('success').equals('true');\n        res.body.data.should.have.property('message').equals('Your Signed up was successful');\n        userId = res.body.data.id;\n        done();\n      });\n  });\n});\n\n\n/*\ndescribe('Users Sign In Tests', () => {\n  it('should NOT let users sign in with wrong credentials', (done) => {\n    const User = {\n      username: 'invalidUser',\n      password: fakeData.newUsers.password,\n    };\n    chai.request(app)\n      .post('/api/v1/auth/signin')\n      .send(User)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.data.should.be.a('object');\n        res.body.data.should.have.property('status').equal(400);\n        res.body.data.should.have.property('error').equal('Invalid signin credentials!');\n        done();\n      });\n  });\n\n  it('should NOT let users signin with wrong password', (done) => {\n    const User = {\n      username: fakeData.newUsers.email,\n      password: 'wrongpassword',\n    };\n    chai.request(app)\n      .post('/api/v1/auth/signin')\n      .send(User)\n      .end((err, res) => {\n        res.should.have.status(400);\n        res.body.should.be.a('object');\n        res.body.data.should.be.a('object');\n        res.body.data.should.have.property('status').equal(400);\n        res.body.data.should.have.property('error').equal('Invalid signin credentials!');\n        done();\n      });\n  });\n\n  it('should let users sign in successfully', (done) => {\n    const User = {\n      username: fakeData.newUsers.email,\n      password: fakeData.newUsers.password,\n    };\n    chai.request(app)\n      .post('/api/v1/auth/signin')\n      .send(User)\n      .end((err, res) => {\n        res.should.have.status(200);\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.data.should.have.property('message').equal('Sign in Successful!');\n        res.body.data.should.have.property('Token');\n        token = res.body.Token;\n        done();\n      });\n  });\n});\n\nexport default { token, userId };\n*/\n"]}