{"version":3,"sources":["admin_test.js"],"names":[],"mappings":"AAAA","sourceRoot":"/home/sami/Documents/AutoMart/test","sourcesContent":["/*\nimport chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport fs from 'fs';\n// eslint-disable-next-line no-unused-vars\nimport app from '../src/app';\nimport assumedData from './assumed/assume';\nimport db from '../src/db/db';\n\nchai.use(chaiHttp);\n\nchai.should();\nconst { expect } = chai;\n\nconst api = chai.request('http://localhost:5000');\n\nconst data = fs.readFileSync(`${__dirname}/assumed/token.txt`);\nconst token = data.toString();\n\ndescribe('ADMIN Activities', () => {\n/*\n  it('should NOT let NON-ADMIN user to view sold AD', (done) => {\n    api\n      .get('/api/v1/car/')\n      .set('authorization', token)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(403);\n        res.body.should.have.property('success').equal('false');\n        res.body.should.have.property('error').equal('You need Admin priviledges to view this set of data!');\n        done();\n      });\n  });\n/*\n  it('should NOT let NON-ADMIN user to DELETE an AD', (done) => {\n    api\n      .delete('/api/v1/car/1/')\n      .set('authorization', token)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(403);\n        res.body.should.have.property('success').equal('false');\n        res.body.should.have.property('error').equal('You need Admin priviledges to view this set of data!');\n        done();\n      });\n  });\n\n  let adminToken;\n  api\n    .post('/api/v1/signin')\n    .send(db.users[1])\n    .end((err, res) => {\n      adminToken = res.body.data.token;\n    });\n\n  it('should let ADMIN user to view all AD including sold AD', (done) => {\n    api\n      .get('/api/v1/car/')\n      .set('authorization', adminToken)\n      .send(assumedData.admin)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.should.have.property('success').equal('true');\n        res.body.data.should.be.a('array');\n        done();\n      });\n  });\n\n  it('should respond to ADMIN\"s attempt to DELETE AD without reference', (done) => {\n    api\n      .delete('/api/v1/car/:carId/')\n      .set('authorization', adminToken)\n      .send(assumedData.admin)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(401);\n        res.body.should.have.property('success').equal('false');\n        res.body.should.have.property('error').equal('Please provide a valid Ad reference!');\n        done();\n      });\n  });\n\n  it('should respond to ADMIN\"s attempt to DELETE non-exitent AD', (done) => {\n    api\n      .delete('/api/v1/car/0/')\n      .set('authorization', adminToken)\n      .send(assumedData.admin)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(404);\n        res.body.should.have.property('success').equal('false');\n        res.body.should.have.property('error').equal('Ad not found!');\n        done();\n      });\n  });\n\n  it('should let ADMIN to DELETE AD successfuly', (done) => {\n    api\n      .get('/api/v1/car/1/')\n      .set('authorization', adminToken)\n      .send(assumedData.admin)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.should.have.property('success').equal('true');\n        res.body.should.have.property('message').equal('Car Ad successfully deleted!');\n        done();\n      });\n  });\n});\n*/\n"]}