{"version":3,"sources":["user_viewer_test.js"],"names":["chai","use","chaiHttp","should","expect","api","request","describe","it","done","get","end","err","res","body","be","a","have","property","equal","console","log","data","to","nested","that","includes","all","keys","id","owner","created_on","state","status","price","manufacturer","model","bodyType","year","mileage","transmission","vehicleInspectionsNumber","licence","imageGallery","orders","flags"],"mappings":"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","sourceRoot":"/home/sami/Documents/AutoMart/test","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport fs from 'fs';\nimport util from 'util';\n// eslint-disable-next-line no-unused-vars\nimport app from '../src/app';\nimport assumedData from './assumed/assume';\n\nchai.use(chaiHttp);\n\nchai.should();\nconst { expect } = chai;\n\nconst api = chai.request('http://localhost:5000');\n\n\ndescribe('User Viewer Activities', () => {\n  it('should respond to viewer trying to view a specific AD without valid AD reference', (done) => {\n    api\n      .get('/api/v1/car/:carId/')\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(401);\n        res.body.should.have.property('success').equal('false');\n        res.body.should.have.property('error').equal('Please provide a valid Ad reference!');\n        done();\n      });\n  });\n\n  it('Should respond to viewer on an AD that doesnt exist ', (done) => {\n    api\n      .get('/api/v1/car/12/')\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(404);\n        res.body.should.have.property('success').equal('false');\n        res.body.should.have.property('error').equal('Ad not found!');\n        done();\n      });\n  });\n\n  it('Should let viewer view a specific AD successfully', (done) => {\n    api\n      .get('/api/v1/car/1/')\n      .end((err, res) => {\n          console.log(res.body.data);\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.should.have.property('success').equal('true');\n        expect(res)\n          .to.have.nested.property('body.data')\n          .that.includes.all.keys(['id', 'owner', 'created_on', 'state', 'status', 'price', 'manufacturer', 'model',\n            'bodyType', 'year', 'mileage', 'transmission', 'vehicleInspectionNumber', 'licence', 'description', \n            'imageGallery', 'orders', 'flags']);\n        res.body.data.id.should.be.a('number');\n        res.body.data.owner.should.be.a('number');\n        res.body.data.created_on.should.be.a('string');\n        res.body.data.state.should.be.a('string');\n        res.body.data.status.should.be.a('string');\n        res.body.data.price.should.be.a('number');\n        res.body.data.manufacturer.should.be.a('string');\n        res.body.data.model.should.be.a('string');\n        res.body.data.bodyType.should.be.a('string');\n        res.body.data.year.should.be.a('number');\n        res.body.data.mileage.should.be.a('number');\n        res.body.data.transmission.should.be.a('number');\n        res.body.data.vehicleInspectionsNumber.should.be.a('string');\n        res.body.data.licence.should.be.a('string');\n        res.body.data.imageGallery.should.be.a('array');\n        res.body.data.orders.should.be.a('array');\n        res.body.data.flags.should.be.a('array');\n        done();\n      });\n  });\n/*\n    it('Should let viewer view all available AD successfully', (done) => {\n      api\n        .get(`/api/v1/car?status=available`)\n        .end((err, res) => {\n          res.body.should.be.a('object');\n          res.body.should.have.property('status').equal(200);\n          res.body.should.have.property('success').equal('true');\n          res.body.should.have.property('data');\n          res.body.data.should.be.a('array');\n          const firstItem = res.body.data[0];\n          firstItem.should.have.property('status').equal('available');\n          expect(firstItem)\n            .to.have.nested.property('body.data[0]')\n            .that.includes.all.keys(['id', 'owner', 'created_on',\n            'state', 'status', 'price', 'manufacturer', 'model', 'body_type']);\n            firstItem.id.should.be.a('integer');\n            firstItem.owner.should.be.a('integer');\n            firstItem.created_on.should.be.a('string');\n            firstItem.state.should.be.a('string');\n            firstItem.should.have.property('status').equal('available');\n            firstItem.price.should.be.a('float');\n            firstItem.manufacturer.should.be.a('float');\n            firstItem.model.should.be.a('string');\n            firstItem.body_type.should.be.a('float');\n            done();\n          });\n    });\n\n\n  it('Should let Viewer View all unsold cars within a price range', (done) => {\n      const minPrice = 200.00;\n      const maxPrice = 1000.00;\n\n      const leastValue = (base) => {\n        if (minPrice <= base) {\n          return true;\n        }\n        return false;\n      };\n\n      const mostValue = (base) => {\n        if (maxPrice >= base) {\n          return true;\n        }\n        return false;\n      };\n      api\n      .get(`/api/v1/car?status=available&minPrice=​${minPrice}​&maxPrice=​${maxPrice}`)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.should.have.property('success').equal('true');\n        res.body.should.have.property('data');\n        res.body.data.should.be.a('array');\n        res.body.data[0].should.be.a('object');\n        expect(leastValue(res.body.data[0].price)).to.equal(true);\n        expect(mostValue(res.body.data[0].price)).to.equal(true);\n        done();\n      });\n  });\n\n  it('Should let viewer to view all unsold and New ADs', (done) => {\n    api\n      .get('/api/v1/car?status=available&state=new')\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.should.have.property('success').equal('true');\n        res.body.should.have.property('data');\n        res.body.data.should.be.a('array');\n        const firstItem = res.body.data[0];\n        firstItem.should.have.property('status').equal('available');\n        firstItem.should.have.property('state').equal('new');\n        expect(firstItem)\n          .to.have.nested.property('body.data[0]')\n          .that.includes.all.keys(['id', 'owner', 'created_on',\n          'state', 'status', 'price', 'manufacturer', 'model', 'body_type']);\n          firstItem.id.should.be.a('integer');\n          firstItem.owner.should.be.a('integer');\n          firstItem.created_on.should.be.a('string');\n          firstItem.state.should.be.a('string');\n          firstItem.should.have.property('status').equal('available');\n          firstItem.price.should.be.a('float');\n          firstItem.manufacturer.should.be.a('float');\n          firstItem.model.should.be.a('string');\n          firstItem.body_type.should.be.a('float');\n          done();\n        });\n  });\n\n  it('Should let viewer to view all unsold and Used ADs', (done) => {\n    api\n      .get('/api/v1/car?status=available&state=used')\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.should.have.property('success').equal('true');\n        res.body.should.have.property('data');\n        res.body.data.should.be.a('array');\n        const firstItem = res.body.data[0];\n        firstItem.should.have.property('status').equal('available');\n        firstItem.should.have.property('state').equal('used');\n        expect(firstItem)\n          .to.have.nested.property('body.data[0]')\n          .that.includes.all.keys(['id', 'owner', 'created_on',\n          'state', 'status', 'price', 'manufacturer', 'model', 'body_type']);\n          firstItem.id.should.be.a('integer');\n          firstItem.owner.should.be.a('integer');\n          firstItem.created_on.should.be.a('string');\n          firstItem.state.should.be.a('string');\n          firstItem.should.have.property('status').equal('available');\n          firstItem.price.should.be.a('float');\n          firstItem.manufacturer.should.be.a('float');\n          firstItem.model.should.be.a('string');\n          firstItem.body_type.should.be.a('float');\n          done();\n        });\n  });\n\n  it('Should let viewer to view all unsold of Specific Make(Toyota) ADs', (done) => {\n    api\n      .get('/api/v1/car?status=available&manufacturer=toyota')\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.should.have.property('success').equal('true');\n        res.body.should.have.property('data');\n        res.body.data.should.be.a('array');\n        const firstItem = res.body.data[0];\n        firstItem.should.have.property('status').equal('available');\n        firstItem.should.have.property('make').equal('toyota');\n        expect(firstItem)\n          .to.have.nested.property('body.data[0]')\n          .that.includes.all.keys(['id', 'owner', 'created_on',\n          'state', 'status', 'price', 'manufacturer', 'model', 'body_type']);\n          firstItem.id.should.be.a('integer');\n          firstItem.owner.should.be.a('integer');\n          firstItem.created_on.should.be.a('string');\n          firstItem.state.should.be.a('string');\n          firstItem.should.have.property('status').equal('available');\n          firstItem.price.should.be.a('float');\n          firstItem.manufacturer.should.be.a('float');\n          firstItem.model.should.be.a('string');\n          firstItem.body_type.should.be.a('float');\n          done();\n        });\n  });\n\n  it('Should let viewer to view all unsold of Specific Body Type ADs', (done) => {\n    api\n      .get('/api/v1/car?status=available&bodyType=salon')\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.should.have.property('success').equal('true');\n        res.body.should.have.property('data');\n        res.body.data.should.be.a('array');\n        const firstItem = res.body.data[0];\n        firstItem.should.have.property('status').equal('available');\n        firstItem.should.have.property('bodyType').equal('salon');\n        expect(firstItem)\n          .to.have.nested.property('body.data[0]')\n          .that.includes.all.keys(['id', 'owner', 'created_on',\n          'state', 'status', 'price', 'manufacturer', 'model', 'body_type']);\n          firstItem.id.should.be.a('integer');\n          firstItem.owner.should.be.a('integer');\n          firstItem.created_on.should.be.a('string');\n          firstItem.state.should.be.a('string');\n          firstItem.should.have.property('status').equal('available');\n          firstItem.price.should.be.a('float');\n          firstItem.manufacturer.should.be.a('float');\n          firstItem.model.should.be.a('string');\n          firstItem.body_type.should.be.a('float');\n          done();\n        });\n  });\n\n  it('Should let viewer to view all unsold of Specific BodyType, Manufacturer, model ADs', (done) => {\n    api\n      .get('/api/v1/car?status=available&bodyType=salon&manufacturer=toyota&model=venza')\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.should.have.property('success').equal('true');\n        res.body.should.have.property('data');\n        res.body.data.should.be.a('array');\n        const firstItem = res.body.data[0];\n        firstItem.should.have.property('status').equal('available');\n        firstItem.should.have.property('bodyType').equal('salon');\n        firstItem.should.have.property('manufacturer').equal('toyota');\n        firstItem.should.have.property('model').equal('venza');\n        expect(firstItem)\n          .to.have.nested.property('body.data[0]')\n          .that.includes.all.keys(['id', 'owner', 'created_on',\n          'state', 'status', 'price', 'manufacturer', 'model', 'body_type']);\n          firstItem.id.should.be.a('integer');\n          firstItem.owner.should.be.a('integer');\n          firstItem.created_on.should.be.a('string');\n          firstItem.state.should.be.a('string');\n          firstItem.should.have.property('status').equal('available');\n          firstItem.price.should.be.a('float');\n          firstItem.manufacturer.should.be.a('float');\n          firstItem.model.should.be.a('string');\n          firstItem.body_type.should.be.a('float');\n          done();\n        });\n  });\n  */\n})"]}