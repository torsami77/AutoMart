/*
import chai from 'chai';
import chaiHttp from 'chai-http';
import app from '../src/app';
import carId from './user_seller_test';


chai.use(chaiHttp);

chai.should();
const expect = chai.expect();


describe('User General Activities', () => {
  it('should respond to invalid id request to view a specific car', (done) => {
    chai.request(app)
      .get('/api/v1/car/<:car-id>/')
      .end((err, res) => {
        res.body.should.be.a('object');
        res.body.should.have.property('status').equal(404);
        res.body.data.should.have.property('message').equal('invalid Car Id!');
        done();
      });
  });

  it('should let general user view a specific car', (done) => {
    chai.request(app)
      .get(`/api/v1/car/${carId}/`)
      .end((err, res) => {
        res.body.should.be.a('object');
        res.body.should.have.property('status').equal(200);
        res.body.data.should.have.property('message').equal('invalid Car Id!');
        expect(res)
          .to.have.nested.property('body.data[0]')
          .that.includes.all.keys(['id', 'owner', 'created_on',
          'state', 'status', 'price', 'manufacturer', 'model', 'body_type']);
        res.body.data.id.should.be.a('integer');
        res.body.data.owner.should.be.a('integer');
        res.body.data.created_on.should.be.a('string');
        res.body.data.state.should.be.a('string');
        res.body.data.status.should.be.a('string');
        res.body.data.price.should.be.a('float');
        res.body.data.manufacturer.should.be.a('float');
        res.body.data.model.should.be.a('string');
        res.body.data.body_type.should.be.a('float');
        done();
      });
  });

  it('should let general user View all unsold cars', (done) => {
    chai.request(app)
      .get('/api/v1/car?status=available')
      .end((err, res) => {
        res.body.should.be.a('object');
        res.body.should.have.property('status').equal(200);
        res.body.data.should.be.a('array');
        res.body.data[0].should.be.a('object');
        const firstItem = res.body.data[0];
        expect(firstItem)
          .to.have.nested.property('body.data[0]')
          .that.includes.all.keys(['id', 'owner', 'created_on',
          'state', 'status', 'price', 'manufacturer', 'model', 'body_type']);
        firstItem.id.should.be.a('integer');
        firstItem.owner.should.be.a('integer');
        firstItem.created_on.should.be.a('string');
        firstItem.state.should.be.a('string');
        firstItem.should.have.property('status').equal('available');
        firstItem.price.should.be.a('float');
        firstItem.manufacturer.should.be.a('float');
        firstItem.model.should.be.a('string');
        firstItem.body_type.should.be.a('float');
        done();
      });
  });

  it('should let general user View all unsold cars within a price range', (done) => {
    const minPrice = 200.00;
    const maxPrice = 1000.00;

    const leastValue = (base) => {
      if (minPrice <= base) {
        return true;
      }
      return false;
    };

    const mostValue = (base) => {
      if (maxPrice >= base) {
        return true;
      }
      return false;
    };

    chai.request(app)
      .get(`/api/v1/car?status=available&min_price=${minPrice}&max_price=${maxPrice}`)
      .end((err, res) => {
        expect(leastValue(res.body.data[0].price)).to.equal(true);
        expect(mostValue(res.body.data[0].price)).to.equal(true);
        done();
      });
  });
});
*/"use strict";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJfZ2VuZXJhbF90ZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6Ii9ob21lL3NhbWkvRG9jdW1lbnRzL0F1dG9NYXJ0L3Rlc3QiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUh0dHAgZnJvbSAnY2hhaS1odHRwJztcbmltcG9ydCBhcHAgZnJvbSAnLi4vc3JjL2FwcCc7XG5pbXBvcnQgY2FySWQgZnJvbSAnLi91c2VyX3NlbGxlcl90ZXN0JztcblxuXG5jaGFpLnVzZShjaGFpSHR0cCk7XG5cbmNoYWkuc2hvdWxkKCk7XG5jb25zdCBleHBlY3QgPSBjaGFpLmV4cGVjdCgpO1xuXG5cbmRlc2NyaWJlKCdVc2VyIEdlbmVyYWwgQWN0aXZpdGllcycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCByZXNwb25kIHRvIGludmFsaWQgaWQgcmVxdWVzdCB0byB2aWV3IGEgc3BlY2lmaWMgY2FyJywgKGRvbmUpID0+IHtcbiAgICBjaGFpLnJlcXVlc3QoYXBwKVxuICAgICAgLmdldCgnL2FwaS92MS9jYXIvPDpjYXItaWQ+LycpXG4gICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xuICAgICAgICByZXMuYm9keS5zaG91bGQuYmUuYSgnb2JqZWN0Jyk7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5oYXZlLnByb3BlcnR5KCdzdGF0dXMnKS5lcXVhbCg0MDQpO1xuICAgICAgICByZXMuYm9keS5kYXRhLnNob3VsZC5oYXZlLnByb3BlcnR5KCdtZXNzYWdlJykuZXF1YWwoJ2ludmFsaWQgQ2FyIElkIScpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBsZXQgZ2VuZXJhbCB1c2VyIHZpZXcgYSBzcGVjaWZpYyBjYXInLCAoZG9uZSkgPT4ge1xuICAgIGNoYWkucmVxdWVzdChhcHApXG4gICAgICAuZ2V0KGAvYXBpL3YxL2Nhci8ke2NhcklkfS9gKVxuICAgICAgLmVuZCgoZXJyLCByZXMpID0+IHtcbiAgICAgICAgcmVzLmJvZHkuc2hvdWxkLmJlLmEoJ29iamVjdCcpO1xuICAgICAgICByZXMuYm9keS5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnc3RhdHVzJykuZXF1YWwoMjAwKTtcbiAgICAgICAgcmVzLmJvZHkuZGF0YS5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnbWVzc2FnZScpLmVxdWFsKCdpbnZhbGlkIENhciBJZCEnKTtcbiAgICAgICAgZXhwZWN0KHJlcylcbiAgICAgICAgICAudG8uaGF2ZS5uZXN0ZWQucHJvcGVydHkoJ2JvZHkuZGF0YVswXScpXG4gICAgICAgICAgLnRoYXQuaW5jbHVkZXMuYWxsLmtleXMoWydpZCcsICdvd25lcicsICdjcmVhdGVkX29uJyxcbiAgICAgICAgICAnc3RhdGUnLCAnc3RhdHVzJywgJ3ByaWNlJywgJ21hbnVmYWN0dXJlcicsICdtb2RlbCcsICdib2R5X3R5cGUnXSk7XG4gICAgICAgIHJlcy5ib2R5LmRhdGEuaWQuc2hvdWxkLmJlLmEoJ2ludGVnZXInKTtcbiAgICAgICAgcmVzLmJvZHkuZGF0YS5vd25lci5zaG91bGQuYmUuYSgnaW50ZWdlcicpO1xuICAgICAgICByZXMuYm9keS5kYXRhLmNyZWF0ZWRfb24uc2hvdWxkLmJlLmEoJ3N0cmluZycpO1xuICAgICAgICByZXMuYm9keS5kYXRhLnN0YXRlLnNob3VsZC5iZS5hKCdzdHJpbmcnKTtcbiAgICAgICAgcmVzLmJvZHkuZGF0YS5zdGF0dXMuc2hvdWxkLmJlLmEoJ3N0cmluZycpO1xuICAgICAgICByZXMuYm9keS5kYXRhLnByaWNlLnNob3VsZC5iZS5hKCdmbG9hdCcpO1xuICAgICAgICByZXMuYm9keS5kYXRhLm1hbnVmYWN0dXJlci5zaG91bGQuYmUuYSgnZmxvYXQnKTtcbiAgICAgICAgcmVzLmJvZHkuZGF0YS5tb2RlbC5zaG91bGQuYmUuYSgnc3RyaW5nJyk7XG4gICAgICAgIHJlcy5ib2R5LmRhdGEuYm9keV90eXBlLnNob3VsZC5iZS5hKCdmbG9hdCcpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBsZXQgZ2VuZXJhbCB1c2VyIFZpZXcgYWxsIHVuc29sZCBjYXJzJywgKGRvbmUpID0+IHtcbiAgICBjaGFpLnJlcXVlc3QoYXBwKVxuICAgICAgLmdldCgnL2FwaS92MS9jYXI/c3RhdHVzPWF2YWlsYWJsZScpXG4gICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xuICAgICAgICByZXMuYm9keS5zaG91bGQuYmUuYSgnb2JqZWN0Jyk7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5oYXZlLnByb3BlcnR5KCdzdGF0dXMnKS5lcXVhbCgyMDApO1xuICAgICAgICByZXMuYm9keS5kYXRhLnNob3VsZC5iZS5hKCdhcnJheScpO1xuICAgICAgICByZXMuYm9keS5kYXRhWzBdLnNob3VsZC5iZS5hKCdvYmplY3QnKTtcbiAgICAgICAgY29uc3QgZmlyc3RJdGVtID0gcmVzLmJvZHkuZGF0YVswXTtcbiAgICAgICAgZXhwZWN0KGZpcnN0SXRlbSlcbiAgICAgICAgICAudG8uaGF2ZS5uZXN0ZWQucHJvcGVydHkoJ2JvZHkuZGF0YVswXScpXG4gICAgICAgICAgLnRoYXQuaW5jbHVkZXMuYWxsLmtleXMoWydpZCcsICdvd25lcicsICdjcmVhdGVkX29uJyxcbiAgICAgICAgICAnc3RhdGUnLCAnc3RhdHVzJywgJ3ByaWNlJywgJ21hbnVmYWN0dXJlcicsICdtb2RlbCcsICdib2R5X3R5cGUnXSk7XG4gICAgICAgIGZpcnN0SXRlbS5pZC5zaG91bGQuYmUuYSgnaW50ZWdlcicpO1xuICAgICAgICBmaXJzdEl0ZW0ub3duZXIuc2hvdWxkLmJlLmEoJ2ludGVnZXInKTtcbiAgICAgICAgZmlyc3RJdGVtLmNyZWF0ZWRfb24uc2hvdWxkLmJlLmEoJ3N0cmluZycpO1xuICAgICAgICBmaXJzdEl0ZW0uc3RhdGUuc2hvdWxkLmJlLmEoJ3N0cmluZycpO1xuICAgICAgICBmaXJzdEl0ZW0uc2hvdWxkLmhhdmUucHJvcGVydHkoJ3N0YXR1cycpLmVxdWFsKCdhdmFpbGFibGUnKTtcbiAgICAgICAgZmlyc3RJdGVtLnByaWNlLnNob3VsZC5iZS5hKCdmbG9hdCcpO1xuICAgICAgICBmaXJzdEl0ZW0ubWFudWZhY3R1cmVyLnNob3VsZC5iZS5hKCdmbG9hdCcpO1xuICAgICAgICBmaXJzdEl0ZW0ubW9kZWwuc2hvdWxkLmJlLmEoJ3N0cmluZycpO1xuICAgICAgICBmaXJzdEl0ZW0uYm9keV90eXBlLnNob3VsZC5iZS5hKCdmbG9hdCcpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBsZXQgZ2VuZXJhbCB1c2VyIFZpZXcgYWxsIHVuc29sZCBjYXJzIHdpdGhpbiBhIHByaWNlIHJhbmdlJywgKGRvbmUpID0+IHtcbiAgICBjb25zdCBtaW5QcmljZSA9IDIwMC4wMDtcbiAgICBjb25zdCBtYXhQcmljZSA9IDEwMDAuMDA7XG5cbiAgICBjb25zdCBsZWFzdFZhbHVlID0gKGJhc2UpID0+IHtcbiAgICAgIGlmIChtaW5QcmljZSA8PSBiYXNlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBjb25zdCBtb3N0VmFsdWUgPSAoYmFzZSkgPT4ge1xuICAgICAgaWYgKG1heFByaWNlID49IGJhc2UpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIGNoYWkucmVxdWVzdChhcHApXG4gICAgICAuZ2V0KGAvYXBpL3YxL2Nhcj9zdGF0dXM9YXZhaWxhYmxlJm1pbl9wcmljZT0ke21pblByaWNlfSZtYXhfcHJpY2U9JHttYXhQcmljZX1gKVxuICAgICAgLmVuZCgoZXJyLCByZXMpID0+IHtcbiAgICAgICAgZXhwZWN0KGxlYXN0VmFsdWUocmVzLmJvZHkuZGF0YVswXS5wcmljZSkpLnRvLmVxdWFsKHRydWUpO1xuICAgICAgICBleHBlY3QobW9zdFZhbHVlKHJlcy5ib2R5LmRhdGFbMF0ucHJpY2UpKS50by5lcXVhbCh0cnVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSk7XG4gIH0pO1xufSk7XG4qL1xuIl19
var cov_1wrp4b6m9h=function(){var path="/home/sami/Documents/AutoMart/test/user_general_test.js";var hash="dace03d020d5d06c8a3f94e8b6d975aba3d86997";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/sami/Documents/AutoMart/test/user_general_test.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"dace03d020d5d06c8a3f94e8b6d975aba3d86997"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();