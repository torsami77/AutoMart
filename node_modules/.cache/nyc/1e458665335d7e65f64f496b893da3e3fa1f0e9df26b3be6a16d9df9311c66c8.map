{"version":3,"sources":["buyer.js"],"names":["app","use","bodyParser","json","urlencoded","extended","text","type","Buyer","req","res","isNaN","parseFloat","body","amount","status","send","error","suceess","field","parseInt","carId","success","newOrder","price","db","cars","map","car","id","orders","length","buyer","userData","created_on","Date","push","hasOwnProperty","data","price_offered","message","params","orderId","checkOrder","checkAd","order","undefined","old_price_offered","new_price_offered","reason","description","newFlag","flags","car_Id"],"mappings":"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","sourceRoot":"/home/sami/Documents/AutoMart/src/ctl","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport db from '../db/db';\n\nconst app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.text());\napp.use(bodyParser.json({ type: 'application/json' }));\n\n\nclass Buyer {\n  static order(req, res) {\n    if (isNaN(parseFloat(req.body.amount))) {\n      res.status(401).send({\n        status: 401,\n        error: 'Please provide a valid price value!',\n        suceess: 'false',\n        field: 'amount',\n      });\n      return false;\n    }\n    if (isNaN(parseInt(req.body.carId, 10))) {\n      res.status(401).send({\n        status: 401,\n        error: 'Please provide a valid order reference!',\n        success: 'false',\n        field: 'carId',\n      });\n      return false;\n    }\n    const newOrder = {};\n    let price;\n    db.cars.map((car) => {\n      if (car.id === parseInt(req.body.carId, 10)) {\n        newOrder.id = car.orders.length + 1;\n        newOrder.buyer = req.userData.id;\n        newOrder.carId = req.body.carId;\n        newOrder.amount = [parseFloat(req.body.amount)];\n        newOrder.status = 'pending';\n        newOrder.created_on = new Date();\n        price = car.price;\n        car.orders.push(newOrder);\n      }\n      return false;\n    });\n    if (newOrder.hasOwnProperty('id')) {\n      res.status(201).send({\n        status: 201,\n        data: {\n          id: newOrder.id,\n          carId: newOrder.carId,\n          created_on: newOrder.created_on,\n          status: newOrder.status,\n          price,\n          price_offered: newOrder.amount[newOrder.amount.length - 1],\n          success: 'true',\n          message: 'Your Order has been placed successfully!',\n          field: 'order',\n        },\n      });\n      return false;\n    // eslint-disable-next-line no-else-return\n    } else {\n      res.status(404).send({\n        status: 404,\n        error: 'Ad not found, Please provide actual car Id!',\n        success: 'false',\n        field: 'carId',\n      });\n      return false;\n    }\n  }\n\n  static updateOrder(req, res) {\n    if (isNaN(parseInt(req.params.orderId, 10))) {\n      return res.status(401).send({\n        status: 401,\n        error: 'Please provide a valid order reference!',\n        suceess: 'false',\n        field: 'order',\n      });\n    }\n    if (isNaN(parseFloat(req.body.amount))) {\n      return res.status(401).send({\n        status: 401,\n        error: 'Please provide a valid price value!',\n        suceess: 'false',\n        field: 'car',\n      });\n    }\n    if (isNaN(parseInt(req.body.carId, 10))) {\n      return res.status(401).send({\n        status: 401,\n        error: 'Please provide a valid AD reference!',\n        suceess: 'false',\n        field: 'car',\n      });\n    }\n    let checkOrder;\n    let checkAd = 0;\n    db.cars.map((car) => {\n      if (car.id === parseInt(req.body.carId, 10)) {\n        checkAd = 1;\n        car.orders.map((order) => {\n          checkAd = 2;\n          if (order.id === parseInt(req.params.orderId, 10) && order.status === 'pending' && order.buyer === req.userData.id) {\n            order.amount.push(parseFloat(req.body.amount));\n            checkOrder = order;\n          // eslint-disable-next-line no-else-return\n          } else {\n            checkAd = 4;\n          }\n        });\n      }\n      return false;\n    });\n    if (checkAd === 4) {\n      res.status(401).send({\n        status: 401,\n        error: 'You can not update this Order, either you don\\'t own it or the Ad is sold!',\n        success: 'false',\n        field: 'order',\n      });\n      return false;\n    }\n    if (undefined !== checkOrder) {\n      return res.status(201).send({\n        status: 201,\n        data: {\n          id: checkOrder.id,\n          carId: checkOrder.carId,\n          status: checkOrder.status,\n          old_price_offered: checkOrder.amount[checkOrder.amount.length - 1],\n          new_price_offered: checkOrder.amount[checkOrder.amount.length - 2],\n          success: 'true',\n          message: 'Your Order has been updated successfully',\n          field: 'order',\n        },\n      });\n    }\n    if (checkAd === 0) {\n      res.status(404).send({\n        status: 404,\n        error: 'Ad not found!',\n        success: 'false',\n        field: 'order',\n      });\n      return false;\n    }\n    if (checkAd === 1) {\n      res.status(404).send({\n        status: 404,\n        error: 'Order not found!',\n        success: 'false',\n        field: 'order',\n      });\n      return false;\n    }\n    return false;\n  }\n\n  static flag(req, res) {\n    if (isNaN(parseInt(req.body.carId, 10))) {\n      return res.status(401).send({\n        status: 401,\n        error: 'Please provide a valid Ad reference',\n        suceess: 'false',\n        field: 'carId',\n      });\n    }\n    if (!req.body.reason || req.body.reason === ' ') {\n      return res.status(401).send({\n        status: 401,\n        error: 'Please indicate your reason for this red flag!',\n        suceess: 'false',\n        field: 'reason',\n      });\n    }\n    if (!req.body.description || req.body.description === ' ') {\n      return res.status(401).send({\n        status: 401,\n        error: 'Please enter description for your red flag!',\n        suceess: 'false',\n        field: 'description',\n      });\n    }\n    const newFlag = {};\n    db.cars.map((car) => {\n      if (car.id === parseInt(req.body.carId, 10)) {\n        newFlag.id = car.flags.length + 1;\n        newFlag.car_Id = req.body.carId;\n        newFlag.reason = req.body.reason;\n        newFlag.description = req.body.description;\n        newFlag.created_on = new Date();\n        car.flags.push(newFlag);\n      }\n      return false;\n    });\n    if (newFlag.hasOwnProperty('id')) {\n      return res.status(201).send({\n        status: 201,\n        data: {\n          id: newFlag.id,\n          car_Id: newFlag.car_Id,\n          reason: newFlag.reason,\n          description: newFlag.description,\n          success: 'true',\n          message: 'Red flag raised successfully!',\n          field: 'flag',\n        },\n      });\n    // eslint-disable-next-line no-else-return\n    } else {\n      return res.status(404).send({\n        status: 404,\n        error: 'Ad not found!',\n        success: 'false',\n        field: 'flag',\n      });\n    }\n  }\n}\n\nexport default Buyer;\n"]}