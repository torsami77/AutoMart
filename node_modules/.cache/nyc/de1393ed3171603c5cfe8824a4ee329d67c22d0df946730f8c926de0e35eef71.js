"use strict";var cov_1h9nx84qxc=function(){var path="/home/sami/Documents/AutoMart/test/user_buyer_test.js";var hash="ddc60e78e5f86d7c23c7faec0e7f15af2520d211";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/sami/Documents/AutoMart/test/user_buyer_test.js",statementMap:{"0":{start:{line:3,column:12},end:{line:3,column:51}},"1":{start:{line:5,column:16},end:{line:5,column:60}},"2":{start:{line:7,column:10},end:{line:7,column:47}},"3":{start:{line:9,column:12},end:{line:9,column:51}},"4":{start:{line:11,column:11},end:{line:11,column:56}},"5":{start:{line:13,column:14},end:{line:13,column:65}},"6":{start:{line:15,column:39},end:{line:15,column:95}},"7":{start:{line:18,column:0},end:{line:18,column:43}},"8":{start:{line:20,column:0},end:{line:20,column:26}},"9":{start:{line:22,column:13},end:{line:22,column:36}},"10":{start:{line:24,column:10},end:{line:24,column:59}},"11":{start:{line:26,column:11},end:{line:26,column:82}},"12":{start:{line:28,column:12},end:{line:28,column:27}},"13":{start:{line:31,column:0},end:{line:259,column:3}},"14":{start:{line:32,column:2},end:{line:40,column:5}},"15":{start:{line:33,column:4},end:{line:39,column:7}},"16":{start:{line:34,column:6},end:{line:34,column:37}},"17":{start:{line:35,column:6},end:{line:35,column:57}},"18":{start:{line:36,column:6},end:{line:36,column:62}},"19":{start:{line:37,column:6},end:{line:37,column:73}},"20":{start:{line:38,column:6},end:{line:38,column:13}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:15,column:9},end:{line:15,column:31}},loc:{start:{line:15,column:37},end:{line:15,column:97}},line:15},"1":{name:"(anonymous_1)",decl:{start:{line:31,column:34},end:{line:31,column:35}},loc:{start:{line:31,column:46},end:{line:259,column:1}},line:31},"2":{name:"(anonymous_2)",decl:{start:{line:32,column:77},end:{line:32,column:78}},loc:{start:{line:32,column:93},end:{line:40,column:3}},line:32},"3":{name:"(anonymous_3)",decl:{start:{line:33,column:69},end:{line:33,column:70}},loc:{start:{line:33,column:89},end:{line:39,column:5}},line:33}},branchMap:{"0":{loc:{start:{line:15,column:46},end:{line:15,column:94}},type:"cond-expr",locations:[{start:{line:15,column:70},end:{line:15,column:73}},{start:{line:15,column:76},end:{line:15,column:94}}],line:15},"1":{loc:{start:{line:15,column:46},end:{line:15,column:67}},type:"binary-expr",locations:[{start:{line:15,column:46},end:{line:15,column:49}},{start:{line:15,column:53},end:{line:15,column:67}}],line:15}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"ddc60e78e5f86d7c23c7faec0e7f15af2520d211"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();var _chai=(cov_1h9nx84qxc.s[0]++,_interopRequireDefault(require("chai")));var _chaiHttp=(cov_1h9nx84qxc.s[1]++,_interopRequireDefault(require("chai-http")));var _fs=(cov_1h9nx84qxc.s[2]++,_interopRequireDefault(require("fs")));var _util=(cov_1h9nx84qxc.s[3]++,_interopRequireDefault(require("util")));var _app=(cov_1h9nx84qxc.s[4]++,_interopRequireDefault(require("../src/app")));var _assume=(cov_1h9nx84qxc.s[5]++,_interopRequireDefault(require("./assumed/assume")));function _interopRequireDefault(obj){cov_1h9nx84qxc.f[0]++;cov_1h9nx84qxc.s[6]++;return(cov_1h9nx84qxc.b[1][0]++,obj)&&(cov_1h9nx84qxc.b[1][1]++,obj.__esModule)?(cov_1h9nx84qxc.b[0][0]++,obj):(cov_1h9nx84qxc.b[0][1]++,{"default":obj});}// eslint-disable-next-line no-unused-vars
cov_1h9nx84qxc.s[7]++;_chai["default"].use(_chaiHttp["default"]);cov_1h9nx84qxc.s[8]++;_chai["default"].should();var expect=(cov_1h9nx84qxc.s[9]++,_chai["default"].expect);var api=(cov_1h9nx84qxc.s[10]++,_chai["default"].request('http://localhost:5000'));var data=(cov_1h9nx84qxc.s[11]++,_fs["default"].readFileSync("".concat(__dirname,"/assumed/token.txt")));var token=(cov_1h9nx84qxc.s[12]++,data.toString());// eslint-disable-next-line import/no-mutable-exports
var carId;cov_1h9nx84qxc.s[13]++;describe('User Buyer Activities',function(){cov_1h9nx84qxc.f[1]++;cov_1h9nx84qxc.s[14]++;it('should NOT let unauthenticated user (buyer) to make a purchase order',function(done){cov_1h9nx84qxc.f[2]++;cov_1h9nx84qxc.s[15]++;api.post('/api/v1/order/').send(_assume["default"].newOrder).end(function(err,res){cov_1h9nx84qxc.f[3]++;cov_1h9nx84qxc.s[16]++;res.body.should.be.a('object');cov_1h9nx84qxc.s[17]++;res.body.should.have.property('status').equal(403);cov_1h9nx84qxc.s[18]++;res.body.should.have.property('success').equal('false');cov_1h9nx84qxc.s[19]++;res.body.should.have.property('error').equal('Unauthorised User!');cov_1h9nx84qxc.s[20]++;done();});});/*
    it('should NOT let auth user (buyer) to attempt a purchase order with invalid order id', (done) => {
        api
          .post('/api/v1/order/')
          .send(assumedData.invalidOrderReff)
          .end((err, res) => {
            res.body.should.be.a('object');
            res.body.should.have.property('status').equal(401);
            res.body.should.have.property('success').equal('false');
            res.body.should.have.property('error').equal('Please provide a valid order reference!');
            done();
          });
    });
  
    it('should NOT let auth user (buyer) to attempt a purchase order with invalid price value', (done) => {
        api
          .post('/api/v1/order/')
          .send(assumedData.invalidOrderAmount)
          .end((err, res) => {
            res.body.should.be.a('object');
            res.body.should.have.property('status').equal(401);
            res.body.should.have.property('success').equal('false');
            res.body.should.have.property('error').equal('Please provide a valid price value!');
            done();
          });
    });
  
    it('should NOT let auth user (buyer) to attempt a purchase order with NOT Found refference', (done) => {
        api
          .post('/api/v1/order/')
          .send(assumedData.orderNotFound)
          .end((err, res) => {
            res.body.should.be.a('object');
            res.body.should.have.property('status').equal(404);
            res.body.should.have.property('success').equal('false');
            res.body.should.have.property('error').equal('Ad not found, Please provide actual car Id!');
            done();
          });
    });
  
    it('should let authenticated user (buyer) to make a purchase order', (done) => {
      api
        .post('/api/v1/order/')
        .send(assumedData.newOrder)
        .set('authorization', token)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(201);
          res.body.data.should.have.property('message').equal('Your Order has been placed successfully!');
          res.body.data.should.have.property('success').equal('true');
          expect(res)
            .to.have.nested.property('body.data')
            .that.includes.all.keys(['id', 'car_id', 'created_on',
            'status', 'price', 'price_offered']);
          res.body.data.id.should.be.a('number');
          res.body.data.car_id.should.be.a('number');
          res.body.data.created_on.should.be.a('string');
          res.body.data.status.should.be.a('string');
          res.body.data.price.should.be.a('number');
          res.body.data.price_offered.should.be.a('number');
          orderId = res.body.data.id;
          done();
        });
    });
  
    it('should NOT let unauthenticated user (buyer) to UPDATE purchase order', (done) => {
        api
          .patch(`/api/v1/order/${orderId}/price`)
          .send(assumedData.newOrderUpdate)
          .end((err, res) => {
            res.body.should.be.a('object');
            res.body.should.have.property('status').equal(403);
            res.body.should.have.property('success').equal('false');
            res.body.should.have.property('error').equal('Unauthorised User!');
            done();
          });
      });
  
      it('should NOT let auth user (buyer) to attempt a purchase UPDATE with invalid order id', (done) => {
          api
            .patch(`/api/v1/order/kkkk/price`)
            .send(assumedData.invalidOrderReffUpdate)
            .end((err, res) => {
              res.body.should.be.a('object');
              res.body.should.have.property('status').equal(401);
              res.body.should.have.property('success').equal('false');
              res.body.should.have.property('error').equal('Please provide a valid order reference!');
              done();
            });
      });
  
      it('should NOT let auth user (buyer) to attempt a purchase UPDATE with invalid price value', (done) => {
          api
            .patch(`/api/v1/order/${orderId}/price`)
            .send(assumedData.invalidOrderAmountUpdate)
            .end((err, res) => {
              res.body.should.be.a('object');
              res.body.should.have.property('status').equal(401);
              res.body.should.have.property('success').equal('false');
              res.body.should.have.property('error').equal('Please provide a valid AD reference!');
              done();
            });
      });
  
      it('should NOT let auth user (buyer) to attempt a purchase UPDATE with invalid price value', (done) => {
        api
          .patch(`/api/v1/order/${orderId}/price`)
          .send(assumedData.invalidOrderAmountUpdate)
          .end((err, res) => {
            res.body.should.be.a('object');
            res.body.should.have.property('status').equal(401);
            res.body.should.have.property('success').equal('false');
            res.body.should.have.property('error').equal('This Order cannot be updated anymore!');
            done();
          });
    });
  
      it('should NOT let auth user (buyer) to attempt a purchase UPDATE with NOT Found refference', (done) => {
          api
            .patch(`/api/v1/order/${orderId}/price`)
            .send(assumedData.orderNotFoundUpdate)
            .end((err, res) => {
              res.body.should.be.a('object');
              res.body.should.have.property('status').equal(404);
              res.body.should.have.property('success').equal('false');
              res.body.should.have.property('error').equal('Ad not found, Please provide actual car Id!');
              done();
            });
      });
  
  
    it('should let authenticated user (buyer) to UPDATE the price of a purchase order', (done) => {
      api
        .patch(`/api/v1/order/${orderId}/price`)
        .send(assumedData.newOrderUpdate)
        .set('authorization', token)
        .end((err, res) => {
          res.body.should.be.a('object');
          res.body.should.have.property('status').equal(200);
          res.body.data.should.have.property('message').equal('Purchase order updated successfully!');
          expect(res)
            .to.have.nested.property('body.data')
            .that.includes.all.keys(['id', 'car_id', 'status', 'old_price_offered',
            'new_price_offered']);
          res.body.data.id.should.be.a('number');
          res.body.data.car_id.should.be.a('number');
          res.body.data.status.should.be.a('string');
          res.body.data.old_price_offered.should.be.a('number');
          res.body.data.new_price_offered.should.be.a('number');
          done();
        });
    });
  
    it('should NOT let auth user (buyer) to attempt FLAG with INVALID refference', (done) => {
        api
          .post(`/api/v1/flag`)
          .send(assumedData.orderNotFoundUpdate)
          .end((err, res) => {
            res.body.should.be.a('object');
            res.body.should.have.property('status').equal(401);
            res.body.should.have.property('success').equal('false');
            res.body.should.have.property('error').equal('Ad not found!');
            done();
          });
    });
  
    it('should NOT let auth user (buyer) to attempt FLAG withOUT REASON', (done) => {
        api
          .post(`/api/v1/flag`)
          .send(assumedData.orderNotFoundUpdate)
          .end((err, res) => {
            res.body.should.be.a('object');
            res.body.should.have.property('status').equal(401);
            res.body.should.have.property('success').equal('false');
            res.body.should.have.property('error').equal('Please indicate your reason for this red flag!');
            done();
          });
    });
  
    it('should NOT let auth user (buyer) to attempt FLAG withOUT DESCRIPTION', (done) => {
        api
          .post(`/api/v1/flag`)
          .send(assumedData.orderNotFoundUpdate)
          .end((err, res) => {
            res.body.should.be.a('object');
            res.body.should.have.property('status').equal(401);
            res.body.should.have.property('success').equal('false');
            res.body.should.have.property('error').equal('Please enter description for your red flag!');
            done();
          });
    });
  
    it('should NOT let auth user (buyer) to attempt FLAG with NOT Found refference', (done) => {
        api
          .post(`/api/v1/flag`)
          .send(assumedData.orderNotFoundUpdate)
          .end((err, res) => {
            res.body.should.be.a('object');
            res.body.should.have.property('status').equal(404);
            res.body.should.have.property('success').equal('false');
            res.body.should.have.property('error').equal('Ad not found!');
            done();
          });
    });
  
    it('should let auth user (buyer) to FLAG an AD successfully', (done) => {
        api
          .post(`/api/v1/flag`)
          .send(assumedData.orderNotFoundUpdate)
          .end((err, res) => {
            res.body.should.be.a('object');
            res.body.should.have.property('status').equal(201);
            res.body.should.have.property('success').equal('true');
            res.body.should.have.property('error').equal('Red flag raised successfully!');
            done();
          });
    });
    */});//# sourceMappingURL=data:application/json;charset=utf-8;base64,