{"version":3,"sources":["user_general_test.js"],"names":[],"mappings":"AAAA","sourceRoot":"/home/sami/Documents/AutoMart/test","sourcesContent":["/*\nimport chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport app from '../src/app';\nimport carId from './user_seller_test';\n\n\nchai.use(chaiHttp);\n\nchai.should();\nconst expect = chai.expect();\n\n\ndescribe('User General Activities', () => {\n  it('should respond to invalid id request to view a specific car', (done) => {\n    chai.request(app)\n      .get('/api/v1/car/<:car-id>/')\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(404);\n        res.body.data.should.have.property('message').equal('invalid Car Id!');\n        done();\n      });\n  });\n\n  it('should let general user view a specific car', (done) => {\n    chai.request(app)\n      .get(`/api/v1/car/${carId}/`)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.data.should.have.property('message').equal('invalid Car Id!');\n        expect(res)\n          .to.have.nested.property('body.data[0]')\n          .that.includes.all.keys(['id', 'owner', 'created_on',\n          'state', 'status', 'price', 'manufacturer', 'model', 'body_type']);\n        res.body.data.id.should.be.a('integer');\n        res.body.data.owner.should.be.a('integer');\n        res.body.data.created_on.should.be.a('string');\n        res.body.data.state.should.be.a('string');\n        res.body.data.status.should.be.a('string');\n        res.body.data.price.should.be.a('float');\n        res.body.data.manufacturer.should.be.a('float');\n        res.body.data.model.should.be.a('string');\n        res.body.data.body_type.should.be.a('float');\n        done();\n      });\n  });\n\n  it('should let general user View all unsold cars', (done) => {\n    chai.request(app)\n      .get('/api/v1/car?status=available')\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.data.should.be.a('array');\n        res.body.data[0].should.be.a('object');\n        const firstItem = res.body.data[0];\n        expect(firstItem)\n          .to.have.nested.property('body.data[0]')\n          .that.includes.all.keys(['id', 'owner', 'created_on',\n          'state', 'status', 'price', 'manufacturer', 'model', 'body_type']);\n        firstItem.id.should.be.a('integer');\n        firstItem.owner.should.be.a('integer');\n        firstItem.created_on.should.be.a('string');\n        firstItem.state.should.be.a('string');\n        firstItem.should.have.property('status').equal('available');\n        firstItem.price.should.be.a('float');\n        firstItem.manufacturer.should.be.a('float');\n        firstItem.model.should.be.a('string');\n        firstItem.body_type.should.be.a('float');\n        done();\n      });\n  });\n\n  it('should let general user View all unsold cars within a price range', (done) => {\n    const minPrice = 200.00;\n    const maxPrice = 1000.00;\n\n    const leastValue = (base) => {\n      if (minPrice <= base) {\n        return true;\n      }\n      return false;\n    };\n\n    const mostValue = (base) => {\n      if (maxPrice >= base) {\n        return true;\n      }\n      return false;\n    };\n\n    chai.request(app)\n      .get(`/api/v1/car?status=available&min_price=${minPrice}&max_price=${maxPrice}`)\n      .end((err, res) => {\n        expect(leastValue(res.body.data[0].price)).to.equal(true);\n        expect(mostValue(res.body.data[0].price)).to.equal(true);\n        done();\n      });\n  });\n});\n*/\n"]}