/*
import chai from 'chai';
import chaiHttp from 'chai-http';
import fs from 'fs';
// eslint-disable-next-line no-unused-vars
import app from '../src/app';
import assumedData from './assumed/assume';
import db from '../src/db/db';

chai.use(chaiHttp);

chai.should();
const { expect } = chai;

const api = chai.request('http://localhost:5000');

const data = fs.readFileSync(`${__dirname}/assumed/token.txt`);
const token = data.toString();

describe('ADMIN Activities', () => {
/*
  it('should NOT let NON-ADMIN user to view sold AD', (done) => {
    api
      .get('/api/v1/car/')
      .set('authorization', token)
      .end((err, res) => {
        res.body.should.be.a('object');
        res.body.should.have.property('status').equal(403);
        res.body.should.have.property('success').equal('false');
        res.body.should.have.property('error').equal('You need Admin priviledges to view this set of data!');
        done();
      });
  });
/*
  it('should NOT let NON-ADMIN user to DELETE an AD', (done) => {
    api
      .delete('/api/v1/car/1/')
      .set('authorization', token)
      .end((err, res) => {
        res.body.should.be.a('object');
        res.body.should.have.property('status').equal(403);
        res.body.should.have.property('success').equal('false');
        res.body.should.have.property('error').equal('You need Admin priviledges to view this set of data!');
        done();
      });
  });

  let adminToken;
  api
    .post('/api/v1/signin')
    .send(db.users[1])
    .end((err, res) => {
      adminToken = res.body.data.token;
    });

  it('should let ADMIN user to view all AD including sold AD', (done) => {
    api
      .get('/api/v1/car/')
      .set('authorization', adminToken)
      .send(assumedData.admin)
      .end((err, res) => {
        res.body.should.be.a('object');
        res.body.should.have.property('status').equal(200);
        res.body.should.have.property('success').equal('true');
        res.body.data.should.be.a('array');
        done();
      });
  });

  it('should respond to ADMIN"s attempt to DELETE AD without reference', (done) => {
    api
      .delete('/api/v1/car/:carId/')
      .set('authorization', adminToken)
      .send(assumedData.admin)
      .end((err, res) => {
        res.body.should.be.a('object');
        res.body.should.have.property('status').equal(401);
        res.body.should.have.property('success').equal('false');
        res.body.should.have.property('error').equal('Please provide a valid Ad reference!');
        done();
      });
  });

  it('should respond to ADMIN"s attempt to DELETE non-exitent AD', (done) => {
    api
      .delete('/api/v1/car/0/')
      .set('authorization', adminToken)
      .send(assumedData.admin)
      .end((err, res) => {
        res.body.should.be.a('object');
        res.body.should.have.property('status').equal(404);
        res.body.should.have.property('success').equal('false');
        res.body.should.have.property('error').equal('Ad not found!');
        done();
      });
  });

  it('should let ADMIN to DELETE AD successfuly', (done) => {
    api
      .get('/api/v1/car/1/')
      .set('authorization', adminToken)
      .send(assumedData.admin)
      .end((err, res) => {
        res.body.should.be.a('object');
        res.body.should.have.property('status').equal(200);
        res.body.should.have.property('success').equal('true');
        res.body.should.have.property('message').equal('Car Ad successfully deleted!');
        done();
      });
  });
});
*/"use strict";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkbWluX3Rlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiL2hvbWUvc2FtaS9Eb2N1bWVudHMvQXV0b01hcnQvdGVzdCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpSHR0cCBmcm9tICdjaGFpLWh0dHAnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuaW1wb3J0IGFwcCBmcm9tICcuLi9zcmMvYXBwJztcbmltcG9ydCBhc3N1bWVkRGF0YSBmcm9tICcuL2Fzc3VtZWQvYXNzdW1lJztcbmltcG9ydCBkYiBmcm9tICcuLi9zcmMvZGIvZGInO1xuXG5jaGFpLnVzZShjaGFpSHR0cCk7XG5cbmNoYWkuc2hvdWxkKCk7XG5jb25zdCB7IGV4cGVjdCB9ID0gY2hhaTtcblxuY29uc3QgYXBpID0gY2hhaS5yZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjUwMDAnKTtcblxuY29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhgJHtfX2Rpcm5hbWV9L2Fzc3VtZWQvdG9rZW4udHh0YCk7XG5jb25zdCB0b2tlbiA9IGRhdGEudG9TdHJpbmcoKTtcblxuZGVzY3JpYmUoJ0FETUlOIEFjdGl2aXRpZXMnLCAoKSA9PiB7XG4vKlxuICBpdCgnc2hvdWxkIE5PVCBsZXQgTk9OLUFETUlOIHVzZXIgdG8gdmlldyBzb2xkIEFEJywgKGRvbmUpID0+IHtcbiAgICBhcGlcbiAgICAgIC5nZXQoJy9hcGkvdjEvY2FyLycpXG4gICAgICAuc2V0KCdhdXRob3JpemF0aW9uJywgdG9rZW4pXG4gICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xuICAgICAgICByZXMuYm9keS5zaG91bGQuYmUuYSgnb2JqZWN0Jyk7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5oYXZlLnByb3BlcnR5KCdzdGF0dXMnKS5lcXVhbCg0MDMpO1xuICAgICAgICByZXMuYm9keS5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnc3VjY2VzcycpLmVxdWFsKCdmYWxzZScpO1xuICAgICAgICByZXMuYm9keS5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnZXJyb3InKS5lcXVhbCgnWW91IG5lZWQgQWRtaW4gcHJpdmlsZWRnZXMgdG8gdmlldyB0aGlzIHNldCBvZiBkYXRhIScpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgfSk7XG4vKlxuICBpdCgnc2hvdWxkIE5PVCBsZXQgTk9OLUFETUlOIHVzZXIgdG8gREVMRVRFIGFuIEFEJywgKGRvbmUpID0+IHtcbiAgICBhcGlcbiAgICAgIC5kZWxldGUoJy9hcGkvdjEvY2FyLzEvJylcbiAgICAgIC5zZXQoJ2F1dGhvcml6YXRpb24nLCB0b2tlbilcbiAgICAgIC5lbmQoKGVyciwgcmVzKSA9PiB7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5iZS5hKCdvYmplY3QnKTtcbiAgICAgICAgcmVzLmJvZHkuc2hvdWxkLmhhdmUucHJvcGVydHkoJ3N0YXR1cycpLmVxdWFsKDQwMyk7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5oYXZlLnByb3BlcnR5KCdzdWNjZXNzJykuZXF1YWwoJ2ZhbHNlJyk7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5oYXZlLnByb3BlcnR5KCdlcnJvcicpLmVxdWFsKCdZb3UgbmVlZCBBZG1pbiBwcml2aWxlZGdlcyB0byB2aWV3IHRoaXMgc2V0IG9mIGRhdGEhJyk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pO1xuICB9KTtcblxuICBsZXQgYWRtaW5Ub2tlbjtcbiAgYXBpXG4gICAgLnBvc3QoJy9hcGkvdjEvc2lnbmluJylcbiAgICAuc2VuZChkYi51c2Vyc1sxXSlcbiAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xuICAgICAgYWRtaW5Ub2tlbiA9IHJlcy5ib2R5LmRhdGEudG9rZW47XG4gICAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBsZXQgQURNSU4gdXNlciB0byB2aWV3IGFsbCBBRCBpbmNsdWRpbmcgc29sZCBBRCcsIChkb25lKSA9PiB7XG4gICAgYXBpXG4gICAgICAuZ2V0KCcvYXBpL3YxL2Nhci8nKVxuICAgICAgLnNldCgnYXV0aG9yaXphdGlvbicsIGFkbWluVG9rZW4pXG4gICAgICAuc2VuZChhc3N1bWVkRGF0YS5hZG1pbilcbiAgICAgIC5lbmQoKGVyciwgcmVzKSA9PiB7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5iZS5hKCdvYmplY3QnKTtcbiAgICAgICAgcmVzLmJvZHkuc2hvdWxkLmhhdmUucHJvcGVydHkoJ3N0YXR1cycpLmVxdWFsKDIwMCk7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5oYXZlLnByb3BlcnR5KCdzdWNjZXNzJykuZXF1YWwoJ3RydWUnKTtcbiAgICAgICAgcmVzLmJvZHkuZGF0YS5zaG91bGQuYmUuYSgnYXJyYXknKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVzcG9uZCB0byBBRE1JTlwicyBhdHRlbXB0IHRvIERFTEVURSBBRCB3aXRob3V0IHJlZmVyZW5jZScsIChkb25lKSA9PiB7XG4gICAgYXBpXG4gICAgICAuZGVsZXRlKCcvYXBpL3YxL2Nhci86Y2FySWQvJylcbiAgICAgIC5zZXQoJ2F1dGhvcml6YXRpb24nLCBhZG1pblRva2VuKVxuICAgICAgLnNlbmQoYXNzdW1lZERhdGEuYWRtaW4pXG4gICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xuICAgICAgICByZXMuYm9keS5zaG91bGQuYmUuYSgnb2JqZWN0Jyk7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5oYXZlLnByb3BlcnR5KCdzdGF0dXMnKS5lcXVhbCg0MDEpO1xuICAgICAgICByZXMuYm9keS5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnc3VjY2VzcycpLmVxdWFsKCdmYWxzZScpO1xuICAgICAgICByZXMuYm9keS5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnZXJyb3InKS5lcXVhbCgnUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBBZCByZWZlcmVuY2UhJyk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlc3BvbmQgdG8gQURNSU5cInMgYXR0ZW1wdCB0byBERUxFVEUgbm9uLWV4aXRlbnQgQUQnLCAoZG9uZSkgPT4ge1xuICAgIGFwaVxuICAgICAgLmRlbGV0ZSgnL2FwaS92MS9jYXIvMC8nKVxuICAgICAgLnNldCgnYXV0aG9yaXphdGlvbicsIGFkbWluVG9rZW4pXG4gICAgICAuc2VuZChhc3N1bWVkRGF0YS5hZG1pbilcbiAgICAgIC5lbmQoKGVyciwgcmVzKSA9PiB7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5iZS5hKCdvYmplY3QnKTtcbiAgICAgICAgcmVzLmJvZHkuc2hvdWxkLmhhdmUucHJvcGVydHkoJ3N0YXR1cycpLmVxdWFsKDQwNCk7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5oYXZlLnByb3BlcnR5KCdzdWNjZXNzJykuZXF1YWwoJ2ZhbHNlJyk7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5oYXZlLnByb3BlcnR5KCdlcnJvcicpLmVxdWFsKCdBZCBub3QgZm91bmQhJyk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGxldCBBRE1JTiB0byBERUxFVEUgQUQgc3VjY2Vzc2Z1bHknLCAoZG9uZSkgPT4ge1xuICAgIGFwaVxuICAgICAgLmdldCgnL2FwaS92MS9jYXIvMS8nKVxuICAgICAgLnNldCgnYXV0aG9yaXphdGlvbicsIGFkbWluVG9rZW4pXG4gICAgICAuc2VuZChhc3N1bWVkRGF0YS5hZG1pbilcbiAgICAgIC5lbmQoKGVyciwgcmVzKSA9PiB7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5iZS5hKCdvYmplY3QnKTtcbiAgICAgICAgcmVzLmJvZHkuc2hvdWxkLmhhdmUucHJvcGVydHkoJ3N0YXR1cycpLmVxdWFsKDIwMCk7XG4gICAgICAgIHJlcy5ib2R5LnNob3VsZC5oYXZlLnByb3BlcnR5KCdzdWNjZXNzJykuZXF1YWwoJ3RydWUnKTtcbiAgICAgICAgcmVzLmJvZHkuc2hvdWxkLmhhdmUucHJvcGVydHkoJ21lc3NhZ2UnKS5lcXVhbCgnQ2FyIEFkIHN1Y2Nlc3NmdWxseSBkZWxldGVkIScpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgfSk7XG59KTtcbiovXG4iXX0=
var cov_flcmm6adm=function(){var path="/home/sami/Documents/AutoMart/test/admin_test.js";var hash="4865f696a6e81a18083225b5743d13e2f6723738";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/sami/Documents/AutoMart/test/admin_test.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"4865f696a6e81a18083225b5743d13e2f6723738"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();