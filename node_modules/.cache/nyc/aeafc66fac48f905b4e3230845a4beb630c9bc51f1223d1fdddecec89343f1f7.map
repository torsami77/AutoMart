{"version":3,"sources":["seller.js"],"names":["app","cloudinary","mynodeconfig","use","bodyParser","json","urlencoded","extended","text","type","Seller","req","res","body","manufacturer","model","bodyType","year","mileage","state","transmission","vehicleInspectionNumber","licence","description","price","status","send","error","success","field","isNaN","match","file","originalname","uploader","upload","path","result","_error","secure_url","imageGallery","orders","flags","id","db","cars","length","createdOn","Date","newCar","owner","userData","created_on","push","data","email","message","Number","parseFloat","parseInt","params","orderId","newPrice","map","order","carId","car"],"mappings":"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","sourceRoot":"/home/sami/Documents/AutoMart/src/ctl","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport db from '../db/db';\nimport mynodeconfig from '../mynodeconfig';\n\nconst app = express();\nconst { cloudinary } = mynodeconfig;\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.text());\napp.use(bodyParser.json({ type: 'application/json' }));\n\n\nclass Seller {\n  static postAd(req, res) {\n    const {\n      // eslint-disable-next-line max-len\n      manufacturer, model, bodyType, year, mileage, state, transmission, vehicleInspectionNumber, licence, description, price,\n    } = req.body;\n\n    if (!manufacturer) {\n      return res.status(422).send({\n        status: 422,\n        error: 'manufacturer field cannot be empty!',\n        success: 'false',\n        field: 'manufacturer',\n      });\n    }\n\n    if (!model) {\n      return res.status(422).send({\n        status: 422,\n        error: 'model field cannot be empty!',\n        success: 'false',\n        field: 'model',\n      });\n    }\n\n    if (!bodyType) {\n      return res.status(422).send({\n        status: 422,\n        error: 'body type field cannot be empty!',\n        success: 'false',\n        field: 'bodytType',\n      });\n    }\n\n    if (!year) {\n      return res.status(422).send({\n        status: 422,\n        error: 'year field cannot be empty!',\n        success: 'false',\n        field: 'year',\n      });\n    }\n\n    if (isNaN(year) || year.match(/^\\d{4}$/)) {\n      return res.status(422).send({\n        status: 422,\n        error: 'invalid year input',\n        success: 'false',\n        field: 'year',\n      });\n    }\n\n    if (!mileage) {\n      return res.status(422).send({\n        status: 422,\n        error: 'mileage field cannot be empty!',\n        success: 'false',\n        field: 'mileage',\n      });\n    }\n\n    if (isNaN(mileage)) {\n      return res.status(422).send({\n        status: 422,\n        error: 'invalid mileage input',\n        success: 'false',\n        field: 'mileage',\n      });\n    }\n\n    if (!state) {\n      return res.status(422).send({\n        status: 422,\n        error: 'state field cannot be empty!',\n        success: 'false',\n        field: 'state',\n      });\n    }\n\n    if (!transmission) {\n      return res.status(422).send({\n        status: 422,\n        error: 'transmission field cannot be empty!',\n        success: 'false',\n        field: 'transmission',\n      });\n    }\n\n    if (!vehicleInspectionNumber) {\n      return res.status(422).send({\n        status: 422,\n        error: 'vehicle inspection number field cannot be empty!',\n        success: 'false',\n        field: 'vehicleInspectionNumber',\n      });\n    }\n\n    if (!licence) {\n      return res.status(422).send({\n        status: 422,\n        error: 'licence field cannot be empty!',\n        success: 'false',\n        field: 'licence',\n      });\n    }\n\n    if (!description) {\n      return res.status(422).send({\n        status: 422,\n        error: 'description field cannot be empty!',\n        success: 'false',\n        field: 'description',\n      });\n    }\n\n    if (!price) {\n      return res.status(422).send({\n        status: 422,\n        error: 'price field cannot be empty!',\n        success: 'false',\n        field: 'price',\n      });\n    }\n\n    if (isNaN(price)) {\n      return res.status(422).send({\n        status: 422,\n        error: 'invalid price input',\n        success: 'false',\n        field: 'price',\n      });\n    }\n    if (!req.file) {\n      return res.status(422).send({\n        status: 422,\n        error: 'Upload at least one image!',\n        success: 'false',\n        field: 'carImage',\n      });\n    }\n\n    if (!req.file.originalname.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n      return res.status(422).send({\n        status: 422,\n        error: 'Please provide a valid image file!',\n        success: 'false',\n        field: 'carImage',\n      });\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    cloudinary.uploader.upload(req.file.path, (result, _error) => {\n      if (result.secure_url) {\n        const imageGallery = [result.secure_url];\n        const orders = [];\n        const flags = [];\n        const id = db.cars.length + 1;\n        const createdOn = new Date();\n        const status = 'Available';\n\n        const newCar = {\n          id,\n          owner: req.userData.id,\n          created_on: createdOn,\n          // eslint-disable-next-line object-property-newline\n          state, status, price, manufacturer, model, bodyType, year, mileage,\n          // eslint-disable-next-line object-property-newline\n          transmission, vehicleInspectionNumber, licence, description, imageGallery, orders, flags,\n        };\n        db.cars.push(newCar);\n        return res.status(201).send({\n          status: 201,\n          data: {\n            id,\n            email: req.userData.email,\n            created_on: createdOn,\n            manufacturer,\n            model,\n            price,\n            state,\n            status,\n            imageGallery,\n            message: 'Your Ad has been added successfully!',\n            success: 'true',\n          },\n        });\n      }\n      return res.status(500).send({\n        status: 500,\n        error: 'No response from Cloudinary!, Please try again ',\n        success: 'false',\n        field: 'Cloudinary',\n      });\n    });\n    return false;\n  }\n\n  static updatePrice(req, res) {\n    if (!req.body.price || Number.isNaN(parseFloat(req.body.price))) {\n      return res.status(401).send({\n        status: 401,\n        error: 'Invalid Price value!',\n        success: 'false',\n        field: 'Price',\n      });\n    }\n    if (Number.isNaN(parseInt(req.params.orderId, 10))) {\n      return res.status(401).send({\n        status: 401,\n        error: 'Invalid Param Request!',\n        success: 'false',\n        field: 'Price',\n      });\n    }\n    const orderId = parseInt(req.params.orderId, 10);\n    const newPrice = parseFloat(req.body.price);\n\n    db.cars.map((order) => {\n      if (order.id === orderId) {\n        if (order.status !== 'sold' && order.owner === req.userData.id) {\n          order.price = newPrice;\n\n          return res.status(201).send({\n            status: 201,\n            data: {\n              id: req.userData.id,\n              email: req.userData.email,\n              created_on: order.created_on,\n              manufacturer: order.manufacturer,\n              model: order.model,\n              price: order.price,\n              state: order.state,\n              status: order.status,\n              message: 'New price Updated!',\n              success: 'True',\n              field: 'Price',\n            },\n          });\n        }\n        return res.status(403).send({\n          status: 403,\n          error: 'You cannot change the price of this Ad!',\n          success: 'false',\n          field: 'Price',\n        });\n      }\n      return res.status(404).send({\n        status: 404,\n        error: 'Ad not found in database!',\n        success: 'false',\n        field: 'Price',\n      });\n    });\n    return false;\n  }\n\n  static markAsSold(req, res) {\n    if (Number.isNaN(parseInt(req.params.carId, 10))) {\n      return res.status(401).send({\n        status: 401,\n        error: 'Invalid Param Request!',\n        success: 'false',\n        field: 'sold',\n      });\n    }\n    const carId = parseInt(req.params.orderId, 10);\n\n    db.cars.map((car) => {\n      if (car.id === carId && car.owner === req.userData.id) {\n        car.status = 'sold';\n\n        return res.status(201).send({\n          status: 201,\n          data: {\n            id: req.userData.id,\n            email: req.userData.email,\n            created_on: car.created_on,\n            manufacturer: car.manufacturer,\n            model: car.model,\n            price: car.price,\n            state: car.state,\n            status: car.status,\n            message: 'Car marked as sold!',\n            success: 'True',\n            field: 'sold',\n          },\n        });\n      }\n      return res.status(403).send({\n        status: 403,\n        error: 'You are not allowed to mark this Ad as sold!',\n        success: 'false',\n        field: 'Price',\n      });\n    });\n    return false;\n  }\n}\n\n\nexport default Seller;\n"]}