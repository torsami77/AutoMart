{"version":3,"sources":["user_seller_test.js"],"names":[],"mappings":"AAAA","sourceRoot":"/home/sami/Documents/AutoMart/test","sourcesContent":["/*\nimport chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport app from '../src/app';\nimport fakeData from './faker/fake';\nimport authData from './user_authentication_test';\n\nchai.use(chaiHttp);\n\nchai.should();\nconst expect = chai.expect();\n\nconst { token } = authData;\n// eslint-disable-next-line import/no-mutable-exports\nlet carId;\n\n\ndescribe('User Seller Activities', () => {\n  it('should NOT let unauthenticated user (seller) create a new Advert ', (done) => {\n    chai.request(app)\n      .post('/api/v1/car/')\n      .send(fakeData.newAdvert)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(404);\n        res.body.data.should.have.property('message').equal('Unauthorised User!');\n        done();\n      });\n  });\n\n  it('should NOT let invalid Token user to post new Advert/affect posted Advert', (done) => {\n    chai.request(app)\n      .post('/api/v1/car')\n      .send(fakeData.newAdvert)\n      .set('authorization', 'represents invalid toke')\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(404);\n        res.body.data.should.have.property('message').equal('Unauthorised User!');\n        done();\n      });\n  });\n\n  it('should let authenticated user (seller) to create new Advert', (done) => {\n    chai.request(app)\n      .post('/api/v1/car')\n      .send(fakeData.newAdvert)\n      .set('authorization', token)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.data.should.be.a('object');\n        expect(res)\n          .to.have.nested.property('body.data[0]')\n          .that.includes.all.keys(['email', 'created_on', 'manufacturer', 'model',\n          'price', 'state', 'status']);\n        res.body.data.email.should.be.a('string');\n        res.body.data.created_on.should.be.a('string');\n        res.body.data.manufacturer.should.be.a('string');\n        res.body.data.model.should.be.a('string');\n        res.body.data.price.should.be.a('float');\n        res.body.data.state.should.be.a('string');\n        res.body.data.status.should.be.a('string');\n        carId = res.body.data.id;\n        done();\n      });\n  });\n\n  it('Should let Authenticated User (seller) to mark his/her posted Advert as sold', (done) => {\n    chai.request(app)\n      .patch(`/api/v1/car/${carId}/status`)\n      .send(fakeData.updateAdvert)\n      .set('authorization', token)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.data.should.have.property('message').equal('Advert updated!');\n        res.body.data.should.have.property('status').equal(fakeData.updateAdvert.sold);\n        done();\n      });\n  });\n\n  it('Should let Authenticated User (seller) to update the price of his/her posted AD.', (done) => {\n    chai.request(app)\n      .patch(`/api/v1/car/${carId}/price`)\n      .send(fakeData.updateAdvert)\n      .set('authorization', token)\n      .end((err, res) => {\n        res.body.should.be.a('object');\n        res.body.should.have.property('status').equal(200);\n        res.body.data.should.have.property('message').equal('Advert updated!');\n        res.body.data.should.have.property('price').equal(fakeData.updateAdvert.price);\n        done();\n      });\n  });\n});\n\nexport default carId;\n*/\n"]}